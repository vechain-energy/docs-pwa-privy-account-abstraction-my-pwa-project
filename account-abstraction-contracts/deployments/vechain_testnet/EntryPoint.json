{
  "address": "0x6cc1324CBeF466E61936792dD4D7C0F3eBe703d1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "ret",
          "type": "bytes"
        }
      ],
      "name": "DelegateAndRevert",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "opIndex",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "FailedOp",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "opIndex",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "inner",
          "type": "bytes"
        }
      ],
      "name": "FailedOpWithRevert",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "PostOpReverted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderAddressResult",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "name": "SignatureValidationFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymaster",
          "type": "address"
        }
      ],
      "name": "AccountDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "BeforeExecution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDeposit",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "revertReason",
          "type": "bytes"
        }
      ],
      "name": "PostOpRevertReason",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "name": "SignatureAggregatorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeDelaySec",
          "type": "uint256"
        }
      ],
      "name": "StakeLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawTime",
          "type": "uint256"
        }
      ],
      "name": "StakeUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "paymaster",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualGasCost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualGasUsed",
          "type": "uint256"
        }
      ],
      "name": "UserOperationEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "UserOperationPrefundTooLow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "revertReason",
          "type": "bytes"
        }
      ],
      "name": "UserOperationRevertReason",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "unstakeDelaySec",
          "type": "uint32"
        }
      ],
      "name": "addStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "delegateAndRevert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "staked",
          "type": "bool"
        },
        {
          "internalType": "uint112",
          "name": "stake",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "unstakeDelaySec",
          "type": "uint32"
        },
        {
          "internalType": "uint48",
          "name": "withdrawTime",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getDepositInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "staked",
              "type": "bool"
            },
            {
              "internalType": "uint112",
              "name": "stake",
              "type": "uint112"
            },
            {
              "internalType": "uint32",
              "name": "unstakeDelaySec",
              "type": "uint32"
            },
            {
              "internalType": "uint48",
              "name": "withdrawTime",
              "type": "uint48"
            }
          ],
          "internalType": "struct IStakeManager.DepositInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "key",
          "type": "uint192"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "initCode",
          "type": "bytes"
        }
      ],
      "name": "getSenderAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "accountGasLimits",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "gasFees",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct PackedUserOperation",
          "name": "userOp",
          "type": "tuple"
        }
      ],
      "name": "getUserOpHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "initCode",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "accountGasLimits",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "preVerificationGas",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "gasFees",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterAndData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ],
              "internalType": "struct PackedUserOperation[]",
              "name": "userOps",
              "type": "tuple[]"
            },
            {
              "internalType": "contract IAggregator",
              "name": "aggregator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IEntryPoint.UserOpsPerAggregator[]",
          "name": "opsPerAggregator",
          "type": "tuple[]"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "handleAggregatedOps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "accountGasLimits",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "gasFees",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct PackedUserOperation[]",
          "name": "ops",
          "type": "tuple[]"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "handleOps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "key",
          "type": "uint192"
        }
      ],
      "name": "incrementNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "verificationGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "paymasterVerificationGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "paymasterPostOpGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preVerificationGas",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymaster",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "maxFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPriorityFeePerGas",
                  "type": "uint256"
                }
              ],
              "internalType": "struct EntryPoint.MemoryUserOp",
              "name": "mUserOp",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "userOpHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "prefund",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contextOffset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preOpGas",
              "type": "uint256"
            }
          ],
          "internalType": "struct EntryPoint.UserOpInfo",
          "name": "opInfo",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        }
      ],
      "name": "innerHandleOp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualGasCost",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "",
          "type": "uint192"
        }
      ],
      "name": "nonceSequenceNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0b8df7637c4070630551b3c4701b2190e9882698d280a34b4a2632a9a7a3f0d5",
  "receipt": {
    "to": null,
    "from": "0x76e5802dF160f57F2F4A4a2C3c6adc05d571748f",
    "contractAddress": "0x6cc1324CBeF466E61936792dD4D7C0F3eBe703d1",
    "transactionIndex": 1,
    "gasUsed": "4042403",
    "logsBloom": "0x
    "blockHash": "0x011fe729986951d43f2c4d5feb34b9882c6dafe44231af982025470c8ca90808",
    "transactionHash": "0x0b8df7637c4070630551b3c4701b2190e9882698d280a34b4a2632a9a7a3f0d5",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 18868009,
        "transactionHash": "0x0b8df7637c4070630551b3c4701b2190e9882698d280a34b4a2632a9a7a3f0d5",
        "address": "0x6cc1324CBeF466E61936792dD4D7C0F3eBe703d1",
        "topics": [
          "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
        ],
        "data": "0x00000000000000000000000076e5802df160f57f2f4a4a2c3c6adc05d571748f",
        "logIndex": 2,
        "blockHash": "0x011fe729986951d43f2c4d5feb34b9882c6dafe44231af982025470c8ca90808"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 18868009,
        "transactionHash": "0x0b8df7637c4070630551b3c4701b2190e9882698d280a34b4a2632a9a7a3f0d5",
        "address": "0x41e53048ED5782c239981E9be2CB351025723462",
        "topics": [
          "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
        ],
        "data": "0x0000000000000000000000006cc1324cbef466e61936792dd4d7c0f3ebe703d1",
        "logIndex": 3,
        "blockHash": "0x011fe729986951d43f2c4d5feb34b9882c6dafe44231af982025470c8ca90808"
      }
    ],
    "blockNumber": 18868009,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b68ffa1d554560b62806c0758f4811a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ret\",\"type\":\"bytes\"}],\"name\":\"DelegateAndRevert\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FailedOp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"inner\",\"type\":\"bytes\"}],\"name\":\"FailedOpWithRevert\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"PostOpReverted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderAddressResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureValidationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"}],\"name\":\"AccountDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeforeExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"}],\"name\":\"PostOpRevertReason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureAggregatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasUsed\",\"type\":\"uint256\"}],\"name\":\"UserOperationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"UserOperationPrefundTooLow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"}],\"name\":\"UserOperationRevertReason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"delegateAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"withdrawTime\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"withdrawTime\",\"type\":\"uint48\"}],\"internalType\":\"struct IStakeManager.DepositInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"getSenderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"accountGasLimits\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasFees\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PackedUserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"getUserOpHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"accountGasLimits\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasFees\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PackedUserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAggregator\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.UserOpsPerAggregator[]\",\"name\":\"opsPerAggregator\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleAggregatedOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"accountGasLimits\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasFees\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PackedUserOperation[]\",\"name\":\"ops\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymasterVerificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymasterPostOpGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPoint.MemoryUserOp\",\"name\":\"mUserOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contextOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPoint.UserOpInfo\",\"name\":\"opInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"innerHandleOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"name\":\"nonceSequenceNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"custom:security-contact\":\"https://bounty.ethereum.org\",\"errors\":{\"FailedOp(uint256,string)\":[{\"params\":{\"opIndex\":\"- Index into the array of ops to the failed one (in simulateValidation, this is always zero).\",\"reason\":\"- Revert reason. The string starts with a unique code \\\"AAmn\\\",                  where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,                  so a failure can be attributed to the correct entity.\"}}],\"FailedOpWithRevert(uint256,string,bytes)\":[{\"details\":\"note that inner is truncated to 2048 bytes\",\"params\":{\"inner\":\"- data from inner cought revert reason\",\"opIndex\":\"- Index into the array of ops to the failed one (in simulateValidation, this is always zero).\",\"reason\":\"- Revert reason. see FailedOp(uint256,string), above\"}}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SignatureValidationFailed(address)\":[{\"params\":{\"aggregator\":\"The aggregator that failed to verify the signature\"}}]},\"events\":{\"AccountDeployed(bytes32,address,address,address)\":{\"params\":{\"factory\":\"- The factory used to deploy this account (in the initCode)\",\"paymaster\":\"- The paymaster used by this UserOp\",\"sender\":\"- The account that is deployed\",\"userOpHash\":\"- The userOp that deployed this account. UserOperationEvent will follow.\"}},\"PostOpRevertReason(bytes32,address,uint256,bytes)\":{\"params\":{\"nonce\":\"- The nonce used in the request.\",\"revertReason\":\"- The return bytes from the (reverted) call to \\\"callData\\\".\",\"sender\":\"- The sender of this request.\",\"userOpHash\":\"- The request unique identifier.\"}},\"SignatureAggregatorChanged(address)\":{\"params\":{\"aggregator\":\"- The aggregator used for the following UserOperationEvents.\"}},\"UserOperationPrefundTooLow(bytes32,address,uint256)\":{\"params\":{\"nonce\":\"- The nonce used in the request.\",\"sender\":\"- The sender of this request.\",\"userOpHash\":\"- The request unique identifier.\"}},\"UserOperationRevertReason(bytes32,address,uint256,bytes)\":{\"params\":{\"nonce\":\"- The nonce used in the request.\",\"revertReason\":\"- The return bytes from the (reverted) call to \\\"callData\\\".\",\"sender\":\"- The sender of this request.\",\"userOpHash\":\"- The request unique identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"unstakeDelaySec\":\"The new lock duration before the deposit can be withdrawn.\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"- The account to query.\"},\"returns\":{\"_0\":\"- The deposit (for gas payment) of the account.\"}},\"delegateAndRevert(address,bytes)\":{\"details\":\"calling this method, the EntryPoint will make a delegatecall to the given data, and report (via revert) the result.  The method always revert, so is only useful off-chain for dry run calls, in cases where state-override to replace  actual EntryPoint code is less convenient.\",\"params\":{\"data\":\"data to pass to target in a delegatecall\",\"target\":\"a target contract to make a delegatecall from entrypoint\"}},\"depositTo(address)\":{\"params\":{\"account\":\"- The account to add to.\"}},\"getDepositInfo(address)\":{\"params\":{\"account\":\"- The account to query.\"},\"returns\":{\"info\":\"  - Full deposit information of given account.\"}},\"getNonce(address,uint192)\":{\"params\":{\"key\":\"the high 192 bit of the nonce\",\"sender\":\"the account address\"},\"returns\":{\"nonce\":\"a full nonce to pass for next UserOp with this sender.\"}},\"getSenderAddress(bytes)\":{\"params\":{\"initCode\":\"- The constructor code to be passed into the UserOperation.\"}},\"getUserOpHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))\":{\"params\":{\"userOp\":\"- The user operation to generate the request ID for.\"},\"returns\":{\"_0\":\"hash the hash of this UserOperation\"}},\"handleAggregatedOps(((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address,bytes)[],address)\":{\"params\":{\"beneficiary\":\"- The address to receive the fees.\",\"opsPerAggregator\":\"- The operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts).\"}},\"handleOps((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address)\":{\"params\":{\"beneficiary\":\"- The address to receive the fees.\",\"ops\":\"- The operations to execute.\"}},\"innerHandleOp(bytes,((address,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256),bytes32,uint256,uint256,uint256),bytes)\":{\"params\":{\"callData\":\"- The callData to execute.\",\"context\":\"- The context bytes.\",\"opInfo\":\"- The UserOpInfo struct.\"},\"returns\":{\"actualGasCost\":\"- the actual cost in eth this UserOperation paid for gas\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"- The address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"withdrawAddress\":\"- The address to send withdrawn value.\",\"withdrawAmount\":\"- The amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"FailedOp(uint256,string)\":[{\"notice\":\"A custom revert error of handleOps, to identify the offending op. Should be caught in off-chain handleOps simulation and not happen on-chain. Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts. NOTE: If simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\"}],\"FailedOpWithRevert(uint256,string,bytes)\":[{\"notice\":\"A custom revert error of handleOps, to report a revert by account or paymaster.\"}],\"SignatureValidationFailed(address)\":[{\"notice\":\"Error case when a signature aggregator fails to verify the aggregated signature it had created.\"}]},\"events\":{\"AccountDeployed(bytes32,address,address,address)\":{\"notice\":\"Account \\\"sender\\\" was deployed.\"},\"BeforeExecution()\":{\"notice\":\"An event emitted by handleOps(), before starting the execution loop. Any event emitted before this event, is part of the validation.\"},\"PostOpRevertReason(bytes32,address,uint256,bytes)\":{\"notice\":\"An event emitted if the UserOperation Paymaster's \\\"postOp\\\" call reverted with non-zero length.\"},\"SignatureAggregatorChanged(address)\":{\"notice\":\"Signature aggregator used by the following UserOperationEvents within this bundle.\"},\"UserOperationPrefundTooLow(bytes32,address,uint256)\":{\"notice\":\"UserOp consumed more than prefund. The UserOperation is reverted, and no refund is made.\"},\"UserOperationRevertReason(bytes32,address,uint256,bytes)\":{\"notice\":\"An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length.\"}},\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"Add to the account's stake - amount and delay any pending unstake is first cancelled.\"},\"balanceOf(address)\":{\"notice\":\"Get account balance.\"},\"delegateAndRevert(address,bytes)\":{\"notice\":\"Helper method for dry-run testing.\"},\"depositTo(address)\":{\"notice\":\"Add to the deposit of the given account.\"},\"deposits(address)\":{\"notice\":\"maps paymaster to their deposits and stakes\"},\"getDepositInfo(address)\":{\"notice\":\"Get deposit info.\"},\"getNonce(address,uint192)\":{\"notice\":\"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order.\"},\"getSenderAddress(bytes)\":{\"notice\":\"Get counterfactual sender address. Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. This method always revert, and returns the address in SenderAddressResult error\"},\"getUserOpHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))\":{\"notice\":\"Generate a request Id - unique identifier for this request. The request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\"},\"handleAggregatedOps(((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperation with Aggregators\"},\"handleOps((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperations. No signature aggregator is used. If any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead.\"},\"incrementNonce(uint192)\":{\"notice\":\"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key.\"},\"innerHandleOp(bytes,((address,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256),bytes32,uint256,uint256,uint256),bytes)\":{\"notice\":\"Inner function to handle a UserOperation. Must be declared \\\"external\\\" to open a call context, but it can only be called by handleOps.\"},\"nonceSequenceNumber(address,uint192)\":{\"notice\":\"The next valid sequence number for a given nonce key.\"},\"unlockStake()\":{\"notice\":\"Attempt to unlock the stake. The value can be withdrawn (using withdrawStake) after the unstake delay.\"},\"withdrawStake(address)\":{\"notice\":\"Withdraw from the (unlocked) stake. Must first call unlockStake and wait for the unstakeDelay to pass.\"},\"withdrawTo(address,uint256)\":{\"notice\":\"Withdraw from the deposit.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/EntryPoint.sol\":\"EntryPoint\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":128},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/core/EntryPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.23;\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n\\nimport \\\"../interfaces/IAccount.sol\\\";\\nimport \\\"../interfaces/IAccountExecute.sol\\\";\\nimport \\\"../interfaces/IPaymaster.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\n\\nimport \\\"../utils/Exec.sol\\\";\\nimport \\\"./StakeManager.sol\\\";\\nimport \\\"./SenderCreator.sol\\\";\\nimport \\\"./Helpers.sol\\\";\\nimport \\\"./NonceManager.sol\\\";\\nimport \\\"./UserOperationLib.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/*\\n * Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n * Only one instance required on each chain.\\n */\\n\\n/// @custom:security-contact https://bounty.ethereum.org\\ncontract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {\\n\\n    using UserOperationLib for PackedUserOperation;\\n\\n    SenderCreator private immutable _senderCreator = new SenderCreator();\\n\\n    function senderCreator() internal view virtual returns (SenderCreator) {\\n        return _senderCreator;\\n    }\\n\\n    //compensate for innerHandleOps' emit message and deposit refund.\\n    // allow some slack for future gas price changes.\\n    uint256 private constant INNER_GAS_OVERHEAD = 10000;\\n\\n    // Marker for inner call revert on out of gas\\n    bytes32 private constant INNER_OUT_OF_GAS = hex\\\"deaddead\\\";\\n    bytes32 private constant INNER_REVERT_LOW_PREFUND = hex\\\"deadaa51\\\";\\n\\n    uint256 private constant REVERT_REASON_MAX_LEN = 2048;\\n    uint256 private constant PENALTY_PERCENT = 10;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // note: solidity \\\"type(IEntryPoint).interfaceId\\\" is without inherited methods but we want to check everything\\n        return interfaceId == (type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId) ||\\n            interfaceId == type(IEntryPoint).interfaceId ||\\n            interfaceId == type(IStakeManager).interfaceId ||\\n            interfaceId == type(INonceManager).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Compensate the caller's beneficiary address with the collected fees of all UserOperations.\\n     * @param beneficiary - The address to receive the fees.\\n     * @param amount      - Amount to transfer.\\n     */\\n    function _compensate(address payable beneficiary, uint256 amount) internal {\\n        require(beneficiary != address(0), \\\"AA90 invalid beneficiary\\\");\\n        (bool success, ) = beneficiary.call{value: amount}(\\\"\\\");\\n        require(success, \\\"AA91 failed send to beneficiary\\\");\\n    }\\n\\n    /**\\n     * Execute a user operation.\\n     * @param opIndex    - Index into the opInfo array.\\n     * @param userOp     - The userOp to execute.\\n     * @param opInfo     - The opInfo filled by validatePrepayment for this userOp.\\n     * @return collected - The total amount this userOp paid.\\n     */\\n    function _executeUserOp(\\n        uint256 opIndex,\\n        PackedUserOperation calldata userOp,\\n        UserOpInfo memory opInfo\\n    )\\n    internal\\n    returns\\n    (uint256 collected) {\\n        uint256 preGas = gasleft();\\n        bytes memory context = getMemoryBytesFromOffset(opInfo.contextOffset);\\n        bool success;\\n        {\\n            uint256 saveFreePtr;\\n            assembly (\\\"memory-safe\\\") {\\n                saveFreePtr := mload(0x40)\\n            }\\n            bytes calldata callData = userOp.callData;\\n            bytes memory innerCall;\\n            bytes4 methodSig;\\n            assembly {\\n                let len := callData.length\\n                if gt(len, 3) {\\n                    methodSig := calldataload(callData.offset)\\n                }\\n            }\\n            if (methodSig == IAccountExecute.executeUserOp.selector) {\\n                bytes memory executeUserOp = abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash));\\n                innerCall = abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context));\\n            } else\\n            {\\n                innerCall = abi.encodeCall(this.innerHandleOp, (callData, opInfo, context));\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                success := call(gas(), address(), 0, add(innerCall, 0x20), mload(innerCall), 0, 32)\\n                collected := mload(0)\\n                mstore(0x40, saveFreePtr)\\n            }\\n        }\\n        if (!success) {\\n            bytes32 innerRevertCode;\\n            assembly (\\\"memory-safe\\\") {\\n                let len := returndatasize()\\n                if eq(32,len) {\\n                    returndatacopy(0, 0, 32)\\n                    innerRevertCode := mload(0)\\n                }\\n            }\\n            if (innerRevertCode == INNER_OUT_OF_GAS) {\\n                // handleOps was called with gas limit too low. abort entire bundle.\\n                //can only be caused by bundler (leaving not enough gas for inner call)\\n                revert FailedOp(opIndex, \\\"AA95 out of gas\\\");\\n            } else if (innerRevertCode == INNER_REVERT_LOW_PREFUND) {\\n                // innerCall reverted on prefund too low. treat entire prefund as \\\"gas cost\\\"\\n                uint256 actualGas = preGas - gasleft() + opInfo.preOpGas;\\n                uint256 actualGasCost = opInfo.prefund;\\n                emitPrefundTooLow(opInfo);\\n                emitUserOperationEvent(opInfo, false, actualGasCost, actualGas);\\n                collected = actualGasCost;\\n            } else {\\n                emit PostOpRevertReason(\\n                    opInfo.userOpHash,\\n                    opInfo.mUserOp.sender,\\n                    opInfo.mUserOp.nonce,\\n                    Exec.getReturnData(REVERT_REASON_MAX_LEN)\\n                );\\n\\n                uint256 actualGas = preGas - gasleft() + opInfo.preOpGas;\\n                collected = _postExecution(\\n                    IPaymaster.PostOpMode.postOpReverted,\\n                    opInfo,\\n                    context,\\n                    actualGas\\n                );\\n            }\\n        }\\n    }\\n\\n    function emitUserOperationEvent(UserOpInfo memory opInfo, bool success, uint256 actualGasCost, uint256 actualGas) internal virtual {\\n        emit UserOperationEvent(\\n            opInfo.userOpHash,\\n            opInfo.mUserOp.sender,\\n            opInfo.mUserOp.paymaster,\\n            opInfo.mUserOp.nonce,\\n            success,\\n            actualGasCost,\\n            actualGas\\n        );\\n    }\\n\\n    function emitPrefundTooLow(UserOpInfo memory opInfo) internal virtual {\\n        emit UserOperationPrefundTooLow(\\n            opInfo.userOpHash,\\n            opInfo.mUserOp.sender,\\n            opInfo.mUserOp.nonce\\n        );\\n    }\\n\\n    /// @inheritdoc IEntryPoint\\n    function handleOps(\\n        PackedUserOperation[] calldata ops,\\n        address payable beneficiary\\n    ) public nonReentrant {\\n        uint256 opslen = ops.length;\\n        UserOpInfo[] memory opInfos = new UserOpInfo[](opslen);\\n\\n        unchecked {\\n            for (uint256 i = 0; i < opslen; i++) {\\n                UserOpInfo memory opInfo = opInfos[i];\\n                (\\n                    uint256 validationData,\\n                    uint256 pmValidationData\\n                ) = _validatePrepayment(i, ops[i], opInfo);\\n                _validateAccountAndPaymasterValidationData(\\n                    i,\\n                    validationData,\\n                    pmValidationData,\\n                    address(0)\\n                );\\n            }\\n\\n            uint256 collected = 0;\\n            emit BeforeExecution();\\n\\n            for (uint256 i = 0; i < opslen; i++) {\\n                collected += _executeUserOp(i, ops[i], opInfos[i]);\\n            }\\n\\n            _compensate(beneficiary, collected);\\n        }\\n    }\\n\\n    /// @inheritdoc IEntryPoint\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) public nonReentrant {\\n\\n        uint256 opasLen = opsPerAggregator.length;\\n        uint256 totalOps = 0;\\n        for (uint256 i = 0; i < opasLen; i++) {\\n            UserOpsPerAggregator calldata opa = opsPerAggregator[i];\\n            PackedUserOperation[] calldata ops = opa.userOps;\\n            IAggregator aggregator = opa.aggregator;\\n\\n            //address(1) is special marker of \\\"signature error\\\"\\n            require(\\n                address(aggregator) != address(1),\\n                \\\"AA96 invalid aggregator\\\"\\n            );\\n\\n            if (address(aggregator) != address(0)) {\\n                // solhint-disable-next-line no-empty-blocks\\n                try aggregator.validateSignatures(ops, opa.signature) {} catch {\\n                    revert SignatureValidationFailed(address(aggregator));\\n                }\\n            }\\n\\n            totalOps += ops.length;\\n        }\\n\\n        UserOpInfo[] memory opInfos = new UserOpInfo[](totalOps);\\n\\n        uint256 opIndex = 0;\\n        for (uint256 a = 0; a < opasLen; a++) {\\n            UserOpsPerAggregator calldata opa = opsPerAggregator[a];\\n            PackedUserOperation[] calldata ops = opa.userOps;\\n            IAggregator aggregator = opa.aggregator;\\n\\n            uint256 opslen = ops.length;\\n            for (uint256 i = 0; i < opslen; i++) {\\n                UserOpInfo memory opInfo = opInfos[opIndex];\\n                (\\n                    uint256 validationData,\\n                    uint256 paymasterValidationData\\n                ) = _validatePrepayment(opIndex, ops[i], opInfo);\\n                _validateAccountAndPaymasterValidationData(\\n                    i,\\n                    validationData,\\n                    paymasterValidationData,\\n                    address(aggregator)\\n                );\\n                opIndex++;\\n            }\\n        }\\n\\n        emit BeforeExecution();\\n\\n        uint256 collected = 0;\\n        opIndex = 0;\\n        for (uint256 a = 0; a < opasLen; a++) {\\n            UserOpsPerAggregator calldata opa = opsPerAggregator[a];\\n            emit SignatureAggregatorChanged(address(opa.aggregator));\\n            PackedUserOperation[] calldata ops = opa.userOps;\\n            uint256 opslen = ops.length;\\n\\n            for (uint256 i = 0; i < opslen; i++) {\\n                collected += _executeUserOp(opIndex, ops[i], opInfos[opIndex]);\\n                opIndex++;\\n            }\\n        }\\n        emit SignatureAggregatorChanged(address(0));\\n\\n        _compensate(beneficiary, collected);\\n    }\\n\\n    /**\\n     * A memory copy of UserOp static fields only.\\n     * Excluding: callData, initCode and signature. Replacing paymasterAndData with paymaster.\\n     */\\n    struct MemoryUserOp {\\n        address sender;\\n        uint256 nonce;\\n        uint256 verificationGasLimit;\\n        uint256 callGasLimit;\\n        uint256 paymasterVerificationGasLimit;\\n        uint256 paymasterPostOpGasLimit;\\n        uint256 preVerificationGas;\\n        address paymaster;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n    }\\n\\n    struct UserOpInfo {\\n        MemoryUserOp mUserOp;\\n        bytes32 userOpHash;\\n        uint256 prefund;\\n        uint256 contextOffset;\\n        uint256 preOpGas;\\n    }\\n\\n    /**\\n     * Inner function to handle a UserOperation.\\n     * Must be declared \\\"external\\\" to open a call context, but it can only be called by handleOps.\\n     * @param callData - The callData to execute.\\n     * @param opInfo   - The UserOpInfo struct.\\n     * @param context  - The context bytes.\\n     * @return actualGasCost - the actual cost in eth this UserOperation paid for gas\\n     */\\n    function innerHandleOp(\\n        bytes memory callData,\\n        UserOpInfo memory opInfo,\\n        bytes calldata context\\n    ) external returns (uint256 actualGasCost) {\\n        uint256 preGas = gasleft();\\n        require(msg.sender == address(this), \\\"AA92 internal call only\\\");\\n        MemoryUserOp memory mUserOp = opInfo.mUserOp;\\n\\n        uint256 callGasLimit = mUserOp.callGasLimit;\\n        unchecked {\\n            // handleOps was called with gas limit too low. abort entire bundle.\\n            if (\\n                gasleft() * 63 / 64 <\\n                callGasLimit +\\n                mUserOp.paymasterPostOpGasLimit +\\n                INNER_GAS_OVERHEAD\\n            ) {\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore(0, INNER_OUT_OF_GAS)\\n                    revert(0, 32)\\n                }\\n            }\\n        }\\n\\n        IPaymaster.PostOpMode mode = IPaymaster.PostOpMode.opSucceeded;\\n        if (callData.length > 0) {\\n            bool success = Exec.call(mUserOp.sender, 0, callData, callGasLimit);\\n            if (!success) {\\n                bytes memory result = Exec.getReturnData(REVERT_REASON_MAX_LEN);\\n                if (result.length > 0) {\\n                    emit UserOperationRevertReason(\\n                        opInfo.userOpHash,\\n                        mUserOp.sender,\\n                        mUserOp.nonce,\\n                        result\\n                    );\\n                }\\n                mode = IPaymaster.PostOpMode.opReverted;\\n            }\\n        }\\n\\n        unchecked {\\n            uint256 actualGas = preGas - gasleft() + opInfo.preOpGas;\\n            return _postExecution(mode, opInfo, context, actualGas);\\n        }\\n    }\\n\\n    /// @inheritdoc IEntryPoint\\n    function getUserOpHash(\\n        PackedUserOperation calldata userOp\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(userOp.hash(), address(this), block.chainid));\\n    }\\n\\n    /**\\n     * Copy general fields from userOp into the memory opInfo structure.\\n     * @param userOp  - The user operation.\\n     * @param mUserOp - The memory user operation.\\n     */\\n    function _copyUserOpToMemory(\\n        PackedUserOperation calldata userOp,\\n        MemoryUserOp memory mUserOp\\n    ) internal pure {\\n        mUserOp.sender = userOp.sender;\\n        mUserOp.nonce = userOp.nonce;\\n        (mUserOp.verificationGasLimit, mUserOp.callGasLimit) = UserOperationLib.unpackUints(userOp.accountGasLimits);\\n        mUserOp.preVerificationGas = userOp.preVerificationGas;\\n        (mUserOp.maxPriorityFeePerGas, mUserOp.maxFeePerGas) = UserOperationLib.unpackUints(userOp.gasFees);\\n        bytes calldata paymasterAndData = userOp.paymasterAndData;\\n        if (paymasterAndData.length > 0) {\\n            require(\\n                paymasterAndData.length >= UserOperationLib.PAYMASTER_DATA_OFFSET,\\n                \\\"AA93 invalid paymasterAndData\\\"\\n            );\\n            (mUserOp.paymaster, mUserOp.paymasterVerificationGasLimit, mUserOp.paymasterPostOpGasLimit) = UserOperationLib.unpackPaymasterStaticFields(paymasterAndData);\\n        } else {\\n            mUserOp.paymaster = address(0);\\n            mUserOp.paymasterVerificationGasLimit = 0;\\n            mUserOp.paymasterPostOpGasLimit = 0;\\n        }\\n    }\\n\\n    /**\\n     * Get the required prefunded gas fee amount for an operation.\\n     * @param mUserOp - The user operation in memory.\\n     */\\n    function _getRequiredPrefund(\\n        MemoryUserOp memory mUserOp\\n    ) internal pure returns (uint256 requiredPrefund) {\\n        unchecked {\\n            uint256 requiredGas = mUserOp.verificationGasLimit +\\n                mUserOp.callGasLimit +\\n                mUserOp.paymasterVerificationGasLimit +\\n                mUserOp.paymasterPostOpGasLimit +\\n                mUserOp.preVerificationGas;\\n\\n            requiredPrefund = requiredGas * mUserOp.maxFeePerGas;\\n        }\\n    }\\n\\n    /**\\n     * Create sender smart contract account if init code is provided.\\n     * @param opIndex  - The operation index.\\n     * @param opInfo   - The operation info.\\n     * @param initCode - The init code for the smart contract account.\\n     */\\n    function _createSenderIfNeeded(\\n        uint256 opIndex,\\n        UserOpInfo memory opInfo,\\n        bytes calldata initCode\\n    ) internal {\\n        if (initCode.length != 0) {\\n            address sender = opInfo.mUserOp.sender;\\n            if (sender.code.length != 0)\\n                revert FailedOp(opIndex, \\\"AA10 sender already constructed\\\");\\n            address sender1 = senderCreator().createSender{\\n                gas: opInfo.mUserOp.verificationGasLimit\\n            }(initCode);\\n            if (sender1 == address(0))\\n                revert FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\");\\n            if (sender1 != sender)\\n                revert FailedOp(opIndex, \\\"AA14 initCode must return sender\\\");\\n            if (sender1.code.length == 0)\\n                revert FailedOp(opIndex, \\\"AA15 initCode must create sender\\\");\\n            address factory = address(bytes20(initCode[0:20]));\\n            emit AccountDeployed(\\n                opInfo.userOpHash,\\n                sender,\\n                factory,\\n                opInfo.mUserOp.paymaster\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IEntryPoint\\n    function getSenderAddress(bytes calldata initCode) public {\\n        address sender = senderCreator().createSender(initCode);\\n        revert SenderAddressResult(sender);\\n    }\\n\\n    /**\\n     * Call account.validateUserOp.\\n     * Revert (with FailedOp) in case validateUserOp reverts, or account didn't send required prefund.\\n     * Decrement account's deposit if needed.\\n     * @param opIndex         - The operation index.\\n     * @param op              - The user operation.\\n     * @param opInfo          - The operation info.\\n     * @param requiredPrefund - The required prefund amount.\\n     */\\n    function _validateAccountPrepayment(\\n        uint256 opIndex,\\n        PackedUserOperation calldata op,\\n        UserOpInfo memory opInfo,\\n        uint256 requiredPrefund,\\n        uint256 verificationGasLimit\\n    )\\n        internal\\n        returns (\\n            uint256 validationData\\n        )\\n    {\\n        unchecked {\\n            MemoryUserOp memory mUserOp = opInfo.mUserOp;\\n            address sender = mUserOp.sender;\\n            _createSenderIfNeeded(opIndex, opInfo, op.initCode);\\n            address paymaster = mUserOp.paymaster;\\n            uint256 missingAccountFunds = 0;\\n            if (paymaster == address(0)) {\\n                uint256 bal = balanceOf(sender);\\n                missingAccountFunds = bal > requiredPrefund\\n                    ? 0\\n                    : requiredPrefund - bal;\\n            }\\n            try\\n                IAccount(sender).validateUserOp{\\n                    gas: verificationGasLimit\\n                }(op, opInfo.userOpHash, missingAccountFunds)\\n            returns (uint256 _validationData) {\\n                validationData = _validationData;\\n            } catch {\\n                revert FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN));\\n            }\\n            if (paymaster == address(0)) {\\n                DepositInfo storage senderInfo = deposits[sender];\\n                uint256 deposit = senderInfo.deposit;\\n                if (requiredPrefund > deposit) {\\n                    revert FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\");\\n                }\\n                senderInfo.deposit = deposit - requiredPrefund;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * In case the request has a paymaster:\\n     *  - Validate paymaster has enough deposit.\\n     *  - Call paymaster.validatePaymasterUserOp.\\n     *  - Revert with proper FailedOp in case paymaster reverts.\\n     *  - Decrement paymaster's deposit.\\n     * @param opIndex                            - The operation index.\\n     * @param op                                 - The user operation.\\n     * @param opInfo                             - The operation info.\\n     * @param requiredPreFund                    - The required prefund amount.\\n     */\\n    function _validatePaymasterPrepayment(\\n        uint256 opIndex,\\n        PackedUserOperation calldata op,\\n        UserOpInfo memory opInfo,\\n        uint256 requiredPreFund\\n    ) internal returns (bytes memory context, uint256 validationData) {\\n        unchecked {\\n            uint256 preGas = gasleft();\\n            MemoryUserOp memory mUserOp = opInfo.mUserOp;\\n            address paymaster = mUserOp.paymaster;\\n            DepositInfo storage paymasterInfo = deposits[paymaster];\\n            uint256 deposit = paymasterInfo.deposit;\\n            if (deposit < requiredPreFund) {\\n                revert FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\");\\n            }\\n            paymasterInfo.deposit = deposit - requiredPreFund;\\n            uint256 pmVerificationGasLimit = mUserOp.paymasterVerificationGasLimit;\\n            try\\n                IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(\\n                    op,\\n                    opInfo.userOpHash,\\n                    requiredPreFund\\n                )\\n            returns (bytes memory _context, uint256 _validationData) {\\n                context = _context;\\n                validationData = _validationData;\\n            } catch {\\n                revert FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN));\\n            }\\n            if (preGas - gasleft() > pmVerificationGasLimit) {\\n                revert FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Revert if either account validationData or paymaster validationData is expired.\\n     * @param opIndex                 - The operation index.\\n     * @param validationData          - The account validationData.\\n     * @param paymasterValidationData - The paymaster validationData.\\n     * @param expectedAggregator      - The expected aggregator.\\n     */\\n    function _validateAccountAndPaymasterValidationData(\\n        uint256 opIndex,\\n        uint256 validationData,\\n        uint256 paymasterValidationData,\\n        address expectedAggregator\\n    ) internal view {\\n        (address aggregator, bool outOfTimeRange) = _getValidationData(\\n            validationData\\n        );\\n        if (expectedAggregator != aggregator) {\\n            revert FailedOp(opIndex, \\\"AA24 signature error\\\");\\n        }\\n        if (outOfTimeRange) {\\n            revert FailedOp(opIndex, \\\"AA22 expired or not due\\\");\\n        }\\n        // pmAggregator is not a real signature aggregator: we don't have logic to handle it as address.\\n        // Non-zero address means that the paymaster fails due to some signature check (which is ok only during estimation).\\n        address pmAggregator;\\n        (pmAggregator, outOfTimeRange) = _getValidationData(\\n            paymasterValidationData\\n        );\\n        if (pmAggregator != address(0)) {\\n            revert FailedOp(opIndex, \\\"AA34 signature error\\\");\\n        }\\n        if (outOfTimeRange) {\\n            revert FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\");\\n        }\\n    }\\n\\n    /**\\n     * Parse validationData into its components.\\n     * @param validationData - The packed validation data (sigFailed, validAfter, validUntil).\\n     * @return aggregator the aggregator of the validationData\\n     * @return outOfTimeRange true if current time is outside the time range of this validationData.\\n     */\\n    function _getValidationData(\\n        uint256 validationData\\n    ) internal view returns (address aggregator, bool outOfTimeRange) {\\n        if (validationData == 0) {\\n            return (address(0), false);\\n        }\\n        ValidationData memory data = _parseValidationData(validationData);\\n        // solhint-disable-next-line not-rely-on-time\\n        outOfTimeRange = block.timestamp > data.validUntil || block.timestamp < data.validAfter;\\n        aggregator = data.aggregator;\\n    }\\n\\n    /**\\n     * Validate account and paymaster (if defined) and\\n     * also make sure total validation doesn't exceed verificationGasLimit.\\n     * This method is called off-chain (simulateValidation()) and on-chain (from handleOps)\\n     * @param opIndex - The index of this userOp into the \\\"opInfos\\\" array.\\n     * @param userOp  - The userOp to validate.\\n     */\\n    function _validatePrepayment(\\n        uint256 opIndex,\\n        PackedUserOperation calldata userOp,\\n        UserOpInfo memory outOpInfo\\n    )\\n        internal\\n        returns (uint256 validationData, uint256 paymasterValidationData)\\n    {\\n        uint256 preGas = gasleft();\\n        MemoryUserOp memory mUserOp = outOpInfo.mUserOp;\\n        _copyUserOpToMemory(userOp, mUserOp);\\n        outOpInfo.userOpHash = getUserOpHash(userOp);\\n\\n        // Validate all numeric values in userOp are well below 128 bit, so they can safely be added\\n        // and multiplied without causing overflow.\\n        uint256 verificationGasLimit = mUserOp.verificationGasLimit;\\n        uint256 maxGasValues = mUserOp.preVerificationGas |\\n            verificationGasLimit |\\n            mUserOp.callGasLimit |\\n            mUserOp.paymasterVerificationGasLimit |\\n            mUserOp.paymasterPostOpGasLimit |\\n            mUserOp.maxFeePerGas |\\n            mUserOp.maxPriorityFeePerGas;\\n        require(maxGasValues <= type(uint120).max, \\\"AA94 gas values overflow\\\");\\n\\n        uint256 requiredPreFund = _getRequiredPrefund(mUserOp);\\n        validationData = _validateAccountPrepayment(\\n            opIndex,\\n            userOp,\\n            outOpInfo,\\n            requiredPreFund,\\n            verificationGasLimit\\n        );\\n\\n        if (!_validateAndUpdateNonce(mUserOp.sender, mUserOp.nonce)) {\\n            revert FailedOp(opIndex, \\\"AA25 invalid account nonce\\\");\\n        }\\n\\n        unchecked {\\n            if (preGas - gasleft() > verificationGasLimit) {\\n                revert FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\");\\n            }\\n        }\\n\\n        bytes memory context;\\n        if (mUserOp.paymaster != address(0)) {\\n            (context, paymasterValidationData) = _validatePaymasterPrepayment(\\n                opIndex,\\n                userOp,\\n                outOpInfo,\\n                requiredPreFund\\n            );\\n        }\\n        unchecked {\\n            outOpInfo.prefund = requiredPreFund;\\n            outOpInfo.contextOffset = getOffsetOfMemoryBytes(context);\\n            outOpInfo.preOpGas = preGas - gasleft() + userOp.preVerificationGas;\\n        }\\n    }\\n\\n    /**\\n     * Process post-operation, called just after the callData is executed.\\n     * If a paymaster is defined and its validation returned a non-empty context, its postOp is called.\\n     * The excess amount is refunded to the account (or paymaster - if it was used in the request).\\n     * @param mode      - Whether is called from innerHandleOp, or outside (postOpReverted).\\n     * @param opInfo    - UserOp fields and info collected during validation.\\n     * @param context   - The context returned in validatePaymasterUserOp.\\n     * @param actualGas - The gas used so far by this user operation.\\n     */\\n    function _postExecution(\\n        IPaymaster.PostOpMode mode,\\n        UserOpInfo memory opInfo,\\n        bytes memory context,\\n        uint256 actualGas\\n    ) private returns (uint256 actualGasCost) {\\n        uint256 preGas = gasleft();\\n        unchecked {\\n            address refundAddress;\\n            MemoryUserOp memory mUserOp = opInfo.mUserOp;\\n            uint256 gasPrice = getUserOpGasPrice(mUserOp);\\n\\n            address paymaster = mUserOp.paymaster;\\n            if (paymaster == address(0)) {\\n                refundAddress = mUserOp.sender;\\n            } else {\\n                refundAddress = paymaster;\\n                if (context.length > 0) {\\n                    actualGasCost = actualGas * gasPrice;\\n                    if (mode != IPaymaster.PostOpMode.postOpReverted) {\\n                        try IPaymaster(paymaster).postOp{\\n                            gas: mUserOp.paymasterPostOpGasLimit\\n                        }(mode, context, actualGasCost, gasPrice)\\n                        // solhint-disable-next-line no-empty-blocks\\n                        {} catch {\\n                            bytes memory reason = Exec.getReturnData(REVERT_REASON_MAX_LEN);\\n                            revert PostOpReverted(reason);\\n                        }\\n                    }\\n                }\\n            }\\n            actualGas += preGas - gasleft();\\n\\n            // Calculating a penalty for unused execution gas\\n            {\\n                uint256 executionGasLimit = mUserOp.callGasLimit + mUserOp.paymasterPostOpGasLimit;\\n                uint256 executionGasUsed = actualGas - opInfo.preOpGas;\\n                // this check is required for the gas used within EntryPoint and not covered by explicit gas limits\\n                if (executionGasLimit > executionGasUsed) {\\n                    uint256 unusedGas = executionGasLimit - executionGasUsed;\\n                    uint256 unusedGasPenalty = (unusedGas * PENALTY_PERCENT) / 100;\\n                    actualGas += unusedGasPenalty;\\n                }\\n            }\\n\\n            actualGasCost = actualGas * gasPrice;\\n            uint256 prefund = opInfo.prefund;\\n            if (prefund < actualGasCost) {\\n                if (mode == IPaymaster.PostOpMode.postOpReverted) {\\n                    actualGasCost = prefund;\\n                    emitPrefundTooLow(opInfo);\\n                    emitUserOperationEvent(opInfo, false, actualGasCost, actualGas);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        mstore(0, INNER_REVERT_LOW_PREFUND)\\n                        revert(0, 32)\\n                    }\\n                }\\n            } else {\\n                uint256 refund = prefund - actualGasCost;\\n                _incrementDeposit(refundAddress, refund);\\n                bool success = mode == IPaymaster.PostOpMode.opSucceeded;\\n                emitUserOperationEvent(opInfo, success, actualGasCost, actualGas);\\n            }\\n        } // unchecked\\n    }\\n\\n    /**\\n     * The gas price this UserOp agrees to pay.\\n     * Relayer/block builder might submit the TX with higher priorityFee, but the user should not.\\n     * @param mUserOp - The userOp to get the gas price from.\\n     */\\n    function getUserOpGasPrice(\\n        MemoryUserOp memory mUserOp\\n    ) internal view returns (uint256) {\\n        unchecked {\\n            uint256 maxFeePerGas = mUserOp.maxFeePerGas;\\n            uint256 maxPriorityFeePerGas = mUserOp.maxPriorityFeePerGas;\\n            if (maxFeePerGas == maxPriorityFeePerGas) {\\n                //legacy mode (for networks that don't support basefee opcode)\\n                return maxFeePerGas;\\n            }\\n            return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n        }\\n    }\\n\\n    /**\\n     * The offset of the given bytes in memory.\\n     * @param data - The bytes to get the offset of.\\n     */\\n    function getOffsetOfMemoryBytes(\\n        bytes memory data\\n    ) internal pure returns (uint256 offset) {\\n        assembly {\\n            offset := data\\n        }\\n    }\\n\\n    /**\\n     * The bytes in memory at the given offset.\\n     * @param offset - The offset to get the bytes from.\\n     */\\n    function getMemoryBytesFromOffset(\\n        uint256 offset\\n    ) internal pure returns (bytes memory data) {\\n        assembly (\\\"memory-safe\\\") {\\n            data := offset\\n        }\\n    }\\n\\n    /// @inheritdoc IEntryPoint\\n    function delegateAndRevert(address target, bytes calldata data) external {\\n        (bool success, bytes memory ret) = target.delegatecall(data);\\n        revert DelegateAndRevert(success, ret);\\n    }\\n}\\n\",\"keccak256\":\"0x0eb1245b5541ff0fbc0f2a23c746e2b4eb9c46e801a4847f15d7d96d1cecc576\",\"license\":\"GPL-3.0\"},\"contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.23;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n\\n /*\\n  * For simulation purposes, validateUserOp (and validatePaymasterUserOp)\\n  * must return this value in case of signature failure, instead of revert.\\n  */\\nuint256 constant SIG_VALIDATION_FAILED = 1;\\n\\n\\n/*\\n * For simulation purposes, validateUserOp (and validatePaymasterUserOp)\\n * return this value on success.\\n */\\nuint256 constant SIG_VALIDATION_SUCCESS = 0;\\n\\n\\n/**\\n * Returned data from validateUserOp.\\n * validateUserOp returns a uint256, which is created by `_packedValidationData` and\\n * parsed by `_parseValidationData`.\\n * @param aggregator  - address(0) - The account validated the signature by itself.\\n *                      address(1) - The account failed to validate the signature.\\n *                      otherwise - This is an address of a signature aggregator that must\\n *                                  be used to validate the signature.\\n * @param validAfter  - This UserOp is valid only after this timestamp.\\n * @param validaUntil - This UserOp is valid only up to this timestamp.\\n */\\nstruct ValidationData {\\n    address aggregator;\\n    uint48 validAfter;\\n    uint48 validUntil;\\n}\\n\\n/**\\n * Extract sigFailed, validAfter, validUntil.\\n * Also convert zero validUntil to type(uint48).max.\\n * @param validationData - The packed validation data.\\n */\\nfunction _parseValidationData(\\n    uint256 validationData\\n) pure returns (ValidationData memory data) {\\n    address aggregator = address(uint160(validationData));\\n    uint48 validUntil = uint48(validationData >> 160);\\n    if (validUntil == 0) {\\n        validUntil = type(uint48).max;\\n    }\\n    uint48 validAfter = uint48(validationData >> (48 + 160));\\n    return ValidationData(aggregator, validAfter, validUntil);\\n}\\n\\n/**\\n * Helper to pack the return value for validateUserOp.\\n * @param data - The ValidationData to pack.\\n */\\nfunction _packValidationData(\\n    ValidationData memory data\\n) pure returns (uint256) {\\n    return\\n        uint160(data.aggregator) |\\n        (uint256(data.validUntil) << 160) |\\n        (uint256(data.validAfter) << (160 + 48));\\n}\\n\\n/**\\n * Helper to pack the return value for validateUserOp, when not using an aggregator.\\n * @param sigFailed  - True for signature failure, false for success.\\n * @param validUntil - Last timestamp this UserOperation is valid (or zero for infinite).\\n * @param validAfter - First timestamp this UserOperation is valid.\\n */\\nfunction _packValidationData(\\n    bool sigFailed,\\n    uint48 validUntil,\\n    uint48 validAfter\\n) pure returns (uint256) {\\n    return\\n        (sigFailed ? 1 : 0) |\\n        (uint256(validUntil) << 160) |\\n        (uint256(validAfter) << (160 + 48));\\n}\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly (\\\"memory-safe\\\") {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\\n/**\\n * The minimum of two numbers.\\n * @param a - First number.\\n * @param b - Second number.\\n */\\n    function min(uint256 a, uint256 b) pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\",\"keccak256\":\"0x6247e011a6cb0b263b3aa098822977181674d91b62e5bdfe04c6e66f72da25d6\",\"license\":\"GPL-3.0\"},\"contracts/core/NonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.23;\\n\\nimport \\\"../interfaces/INonceManager.sol\\\";\\n\\n/**\\n * nonce management functionality\\n */\\nabstract contract NonceManager is INonceManager {\\n\\n    /**\\n     * The next valid sequence number for a given nonce key.\\n     */\\n    mapping(address => mapping(uint192 => uint256)) public nonceSequenceNumber;\\n\\n    /// @inheritdoc INonceManager\\n    function getNonce(address sender, uint192 key)\\n    public view override returns (uint256 nonce) {\\n        return nonceSequenceNumber[sender][key] | (uint256(key) << 64);\\n    }\\n\\n    // allow an account to manually increment its own nonce.\\n    // (mainly so that during construction nonce can be made non-zero,\\n    // to \\\"absorb\\\" the gas cost of first nonce increment to 1st transaction (construction),\\n    // not to 2nd transaction)\\n    function incrementNonce(uint192 key) public override {\\n        nonceSequenceNumber[msg.sender][key]++;\\n    }\\n\\n    /**\\n     * validate nonce uniqueness for this account.\\n     * called just after validateUserOp()\\n     * @return true if the nonce was incremented successfully.\\n     *         false if the current nonce doesn't match the given one.\\n     */\\n    function _validateAndUpdateNonce(address sender, uint256 nonce) internal returns (bool) {\\n\\n        uint192 key = uint192(nonce >> 64);\\n        uint64 seq = uint64(nonce);\\n        return nonceSequenceNumber[sender][key]++ == seq;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1f951786ce6f171e7ed0242fee73ee4a205c7523404ee6cffca48b8c64ea5fe9\",\"license\":\"GPL-3.0\"},\"contracts/core/SenderCreator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.23;\\n\\n/**\\n * Helper contract for EntryPoint, to call userOp.initCode from a \\\"neutral\\\" address,\\n * which is explicitly not the entryPoint itself.\\n */\\ncontract SenderCreator {\\n    /**\\n     * Call the \\\"initCode\\\" factory to create and return the sender account address.\\n     * @param initCode - The initCode value from a UserOp. contains 20 bytes of factory address,\\n     *                   followed by calldata.\\n     * @return sender  - The returned address of the created account, or zero address on failure.\\n     */\\n    function createSender(\\n        bytes calldata initCode\\n    ) external returns (address sender) {\\n        address factory = address(bytes20(initCode[0:20]));\\n        bytes memory initCallData = initCode[20:];\\n        bool success;\\n        /* solhint-disable no-inline-assembly */\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(\\n                gas(),\\n                factory,\\n                0,\\n                add(initCallData, 0x20),\\n                mload(initCallData),\\n                0,\\n                32\\n            )\\n            sender := mload(0)\\n        }\\n        if (!success) {\\n            sender = address(0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb95afb6e4cf921c1ed105ecb9f549ca46bee57f68acd1d2f4f84607ac0db5c5\",\"license\":\"GPL-3.0\"},\"contracts/core/StakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.23;\\n\\nimport \\\"../interfaces/IStakeManager.sol\\\";\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable not-rely-on-time */\\n\\n/**\\n * Manage deposits and stakes.\\n * Deposit is just a balance used to pay for UserOperations (either by a paymaster or an account).\\n * Stake is value locked for at least \\\"unstakeDelay\\\" by a paymaster.\\n */\\nabstract contract StakeManager is IStakeManager {\\n    /// maps paymaster to their deposits and stakes\\n    mapping(address => DepositInfo) public deposits;\\n\\n    /// @inheritdoc IStakeManager\\n    function getDepositInfo(\\n        address account\\n    ) public view returns (DepositInfo memory info) {\\n        return deposits[account];\\n    }\\n\\n    /**\\n     * Internal method to return just the stake info.\\n     * @param addr - The account to query.\\n     */\\n    function _getStakeInfo(\\n        address addr\\n    ) internal view returns (StakeInfo memory info) {\\n        DepositInfo storage depositInfo = deposits[addr];\\n        info.stake = depositInfo.stake;\\n        info.unstakeDelaySec = depositInfo.unstakeDelaySec;\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function balanceOf(address account) public view returns (uint256) {\\n        return deposits[account].deposit;\\n    }\\n\\n    receive() external payable {\\n        depositTo(msg.sender);\\n    }\\n\\n    /**\\n     * Increments an account's deposit.\\n     * @param account - The account to increment.\\n     * @param amount  - The amount to increment by.\\n     * @return the updated deposit of this account\\n     */\\n    function _incrementDeposit(address account, uint256 amount) internal returns (uint256) {\\n        DepositInfo storage info = deposits[account];\\n        uint256 newAmount = info.deposit + amount;\\n        info.deposit = newAmount;\\n        return newAmount;\\n    }\\n\\n    /**\\n     * Add to the deposit of the given account.\\n     * @param account - The account to add to.\\n     */\\n    function depositTo(address account) public virtual payable {\\n        uint256 newDeposit = _incrementDeposit(account, msg.value);\\n        emit Deposited(account, newDeposit);\\n    }\\n\\n    /**\\n     * Add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param unstakeDelaySec The new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 unstakeDelaySec) public payable {\\n        DepositInfo storage info = deposits[msg.sender];\\n        require(unstakeDelaySec > 0, \\\"must specify unstake delay\\\");\\n        require(\\n            unstakeDelaySec >= info.unstakeDelaySec,\\n            \\\"cannot decrease unstake time\\\"\\n        );\\n        uint256 stake = info.stake + msg.value;\\n        require(stake > 0, \\\"no stake specified\\\");\\n        require(stake <= type(uint112).max, \\\"stake overflow\\\");\\n        deposits[msg.sender] = DepositInfo(\\n            info.deposit,\\n            true,\\n            uint112(stake),\\n            unstakeDelaySec,\\n            0\\n        );\\n        emit StakeLocked(msg.sender, stake, unstakeDelaySec);\\n    }\\n\\n    /**\\n     * Attempt to unlock the stake.\\n     * The value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external {\\n        DepositInfo storage info = deposits[msg.sender];\\n        require(info.unstakeDelaySec != 0, \\\"not staked\\\");\\n        require(info.staked, \\\"already unstaking\\\");\\n        uint48 withdrawTime = uint48(block.timestamp) + info.unstakeDelaySec;\\n        info.withdrawTime = withdrawTime;\\n        info.staked = false;\\n        emit StakeUnlocked(msg.sender, withdrawTime);\\n    }\\n\\n    /**\\n     * Withdraw from the (unlocked) stake.\\n     * Must first call unlockStake and wait for the unstakeDelay to pass.\\n     * @param withdrawAddress - The address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external {\\n        DepositInfo storage info = deposits[msg.sender];\\n        uint256 stake = info.stake;\\n        require(stake > 0, \\\"No stake to withdraw\\\");\\n        require(info.withdrawTime > 0, \\\"must call unlockStake() first\\\");\\n        require(\\n            info.withdrawTime <= block.timestamp,\\n            \\\"Stake withdrawal is not due\\\"\\n        );\\n        info.unstakeDelaySec = 0;\\n        info.withdrawTime = 0;\\n        info.stake = 0;\\n        emit StakeWithdrawn(msg.sender, withdrawAddress, stake);\\n        (bool success,) = withdrawAddress.call{value: stake}(\\\"\\\");\\n        require(success, \\\"failed to withdraw stake\\\");\\n    }\\n\\n    /**\\n     * Withdraw from the deposit.\\n     * @param withdrawAddress - The address to send withdrawn value.\\n     * @param withdrawAmount  - The amount to withdraw.\\n     */\\n    function withdrawTo(\\n        address payable withdrawAddress,\\n        uint256 withdrawAmount\\n    ) external {\\n        DepositInfo storage info = deposits[msg.sender];\\n        require(withdrawAmount <= info.deposit, \\\"Withdraw amount too large\\\");\\n        info.deposit = info.deposit - withdrawAmount;\\n        emit Withdrawn(msg.sender, withdrawAddress, withdrawAmount);\\n        (bool success,) = withdrawAddress.call{value: withdrawAmount}(\\\"\\\");\\n        require(success, \\\"failed to withdraw\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x673eb19600058d8642605ca409c9e1d4cab13735564b856270b92c330ffb1b8d\",\"license\":\"GPL-3.0-only\"},\"contracts/core/UserOperationLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.23;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport \\\"../interfaces/PackedUserOperation.sol\\\";\\nimport {calldataKeccak, min} from \\\"./Helpers.sol\\\";\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    uint256 public constant PAYMASTER_VALIDATION_GAS_OFFSET = 20;\\n    uint256 public constant PAYMASTER_POSTOP_GAS_OFFSET = 36;\\n    uint256 public constant PAYMASTER_DATA_OFFSET = 52;\\n    /**\\n     * Get sender from user operation data.\\n     * @param userOp - The user operation data.\\n     */\\n    function getSender(\\n        PackedUserOperation calldata userOp\\n    ) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {\\n            data := calldataload(userOp)\\n        }\\n        return address(uint160(data));\\n    }\\n\\n    /**\\n     * Relayer/block builder might submit the TX with higher priorityFee,\\n     * but the user should not pay above what he signed for.\\n     * @param userOp - The user operation data.\\n     */\\n    function gasPrice(\\n        PackedUserOperation calldata userOp\\n    ) internal view returns (uint256) {\\n        unchecked {\\n            (uint256 maxPriorityFeePerGas, uint256 maxFeePerGas) = unpackUints(userOp.gasFees);\\n            if (maxFeePerGas == maxPriorityFeePerGas) {\\n                //legacy mode (for networks that don't support basefee opcode)\\n                return maxFeePerGas;\\n            }\\n            return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n        }\\n    }\\n\\n    /**\\n     * Pack the user operation data into bytes for hashing.\\n     * @param userOp - The user operation data.\\n     */\\n    function encode(\\n        PackedUserOperation calldata userOp\\n    ) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        bytes32 accountGasLimits = userOp.accountGasLimits;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        bytes32 gasFees = userOp.gasFees;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            accountGasLimits, preVerificationGas, gasFees,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function unpackUints(\\n        bytes32 packed\\n    ) internal pure returns (uint256 high128, uint256 low128) {\\n        return (uint128(bytes16(packed)), uint128(uint256(packed)));\\n    }\\n\\n    //unpack just the high 128-bits from a packed value\\n    function unpackHigh128(bytes32 packed) internal pure returns (uint256) {\\n        return uint256(packed) >> 128;\\n    }\\n\\n    // unpack just the low 128-bits from a packed value\\n    function unpackLow128(bytes32 packed) internal pure returns (uint256) {\\n        return uint128(uint256(packed));\\n    }\\n\\n    function unpackMaxPriorityFeePerGas(PackedUserOperation calldata userOp)\\n    internal pure returns (uint256) {\\n        return unpackHigh128(userOp.gasFees);\\n    }\\n\\n    function unpackMaxFeePerGas(PackedUserOperation calldata userOp)\\n    internal pure returns (uint256) {\\n        return unpackLow128(userOp.gasFees);\\n    }\\n\\n    function unpackVerificationGasLimit(PackedUserOperation calldata userOp)\\n    internal pure returns (uint256) {\\n        return unpackHigh128(userOp.accountGasLimits);\\n    }\\n\\n    function unpackCallGasLimit(PackedUserOperation calldata userOp)\\n    internal pure returns (uint256) {\\n        return unpackLow128(userOp.accountGasLimits);\\n    }\\n\\n    function unpackPaymasterVerificationGasLimit(PackedUserOperation calldata userOp)\\n    internal pure returns (uint256) {\\n        return uint128(bytes16(userOp.paymasterAndData[PAYMASTER_VALIDATION_GAS_OFFSET : PAYMASTER_POSTOP_GAS_OFFSET]));\\n    }\\n\\n    function unpackPostOpGasLimit(PackedUserOperation calldata userOp)\\n    internal pure returns (uint256) {\\n        return uint128(bytes16(userOp.paymasterAndData[PAYMASTER_POSTOP_GAS_OFFSET : PAYMASTER_DATA_OFFSET]));\\n    }\\n\\n    function unpackPaymasterStaticFields(\\n        bytes calldata paymasterAndData\\n    ) internal pure returns (address paymaster, uint256 validationGasLimit, uint256 postOpGasLimit) {\\n        return (\\n            address(bytes20(paymasterAndData[: PAYMASTER_VALIDATION_GAS_OFFSET])),\\n            uint128(bytes16(paymasterAndData[PAYMASTER_VALIDATION_GAS_OFFSET : PAYMASTER_POSTOP_GAS_OFFSET])),\\n            uint128(bytes16(paymasterAndData[PAYMASTER_POSTOP_GAS_OFFSET : PAYMASTER_DATA_OFFSET]))\\n        );\\n    }\\n\\n    /**\\n     * Hash the user operation data.\\n     * @param userOp - The user operation data.\\n     */\\n    function hash(\\n        PackedUserOperation calldata userOp\\n    ) internal pure returns (bytes32) {\\n        return keccak256(encode(userOp));\\n    }\\n}\\n\",\"keccak256\":\"0x9d50ece985d35f82e33e5da417595c86fac10449e3d10895d08363d33aad454b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./PackedUserOperation.sol\\\";\\n\\ninterface IAccount {\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp              - The operation that is about to be executed.\\n     * @param userOpHash          - Hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds - Missing funds on the account's deposit in the entrypoint.\\n     *                              This is the minimum amount to transfer to the sender(entryPoint) to be\\n     *                              able to make the call. The excess is left as a deposit in the entrypoint\\n     *                              for future calls. Can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\".\\n     *                              In case there is a paymaster in the request (or the current deposit is high\\n     *                              enough), this value will be zero.\\n     * @return validationData       - Packaged ValidationData structure. use `_packValidationData` and\\n     *                              `_unpackValidationData` to encode and decode.\\n     *                              <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *                                 otherwise, an address of an \\\"authorizer\\\" contract.\\n     *                              <6-byte> validUntil - Last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *                              <6-byte> validAfter - First timestamp this operation is valid\\n     *                                                    If an account doesn't use time-range, it is enough to\\n     *                                                    return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *                              Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 missingAccountFunds\\n    ) external returns (uint256 validationData);\\n}\\n\",\"keccak256\":\"0x38710bec0cb20ff4ceef46a80475b5bdabc27b7efd2687fd473db68332f61b78\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccountExecute.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./PackedUserOperation.sol\\\";\\n\\ninterface IAccountExecute {\\n    /**\\n     * Account may implement this execute method.\\n     * passing this methodSig at the beginning of callData will cause the entryPoint to pass the full UserOp (and hash)\\n     * to the account.\\n     * The account should skip the methodSig, and use the callData (and optionally, other UserOp fields)\\n     *\\n     * @param userOp              - The operation that was just validated.\\n     * @param userOpHash          - Hash of the user's request data.\\n     */\\n    function executeUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd3dc32dde1add1fb6377f939ceff6be31c2e21343522311f7b88db666be9ee6c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./PackedUserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n    /**\\n     * Validate aggregated signature.\\n     * Revert if the aggregated signature does not match the given list of operations.\\n     * @param userOps   - Array of UserOperations to validate the signature for.\\n     * @param signature - The aggregated signature.\\n     */\\n    function validateSignatures(\\n        PackedUserOperation[] calldata userOps,\\n        bytes calldata signature\\n    ) external view;\\n\\n    /**\\n     * Validate signature of a single userOp.\\n     * This method should be called by bundler after EntryPointSimulation.simulateValidation() returns\\n     * the aggregator this account uses.\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp        - The userOperation received from the user.\\n     * @return sigForUserOp - The value to put into the signature field of the userOp when calling handleOps.\\n     *                        (usually empty, unless account and aggregator support some kind of \\\"multisig\\\".\\n     */\\n    function validateUserOpSignature(\\n        PackedUserOperation calldata userOp\\n    ) external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * Aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation.\\n     * @param userOps              - Array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature - The aggregated signature.\\n     */\\n    function aggregateSignatures(\\n        PackedUserOperation[] calldata userOps\\n    ) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0xf100d6fcc0c3b450b13e979b6a42c628c292a1bc340eccc2e7796b80e3975588\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.5;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./PackedUserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\nimport \\\"./INonceManager.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n    /***\\n     * An event emitted after each successful request.\\n     * @param userOpHash    - Unique identifier for the request (hash its entire content, except signature).\\n     * @param sender        - The account that generates this request.\\n     * @param paymaster     - If non-null, the paymaster that pays for this request.\\n     * @param nonce         - The nonce value from the request.\\n     * @param success       - True if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - Actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - Total gas used by this UserOperation (including preVerification, creation,\\n     *                        validation and execution).\\n     */\\n    event UserOperationEvent(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        address indexed paymaster,\\n        uint256 nonce,\\n        bool success,\\n        uint256 actualGasCost,\\n        uint256 actualGasUsed\\n    );\\n\\n    /**\\n     * Account \\\"sender\\\" was deployed.\\n     * @param userOpHash - The userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender     - The account that is deployed\\n     * @param factory    - The factory used to deploy this account (in the initCode)\\n     * @param paymaster  - The paymaster used by this UserOp\\n     */\\n    event AccountDeployed(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        address factory,\\n        address paymaster\\n    );\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length.\\n     * @param userOpHash   - The request unique identifier.\\n     * @param sender       - The sender of this request.\\n     * @param nonce        - The nonce used in the request.\\n     * @param revertReason - The return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        uint256 nonce,\\n        bytes revertReason\\n    );\\n\\n    /**\\n     * An event emitted if the UserOperation Paymaster's \\\"postOp\\\" call reverted with non-zero length.\\n     * @param userOpHash   - The request unique identifier.\\n     * @param sender       - The sender of this request.\\n     * @param nonce        - The nonce used in the request.\\n     * @param revertReason - The return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event PostOpRevertReason(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        uint256 nonce,\\n        bytes revertReason\\n    );\\n\\n    /**\\n     * UserOp consumed more than prefund. The UserOperation is reverted, and no refund is made.\\n     * @param userOpHash   - The request unique identifier.\\n     * @param sender       - The sender of this request.\\n     * @param nonce        - The nonce used in the request.\\n     */\\n    event UserOperationPrefundTooLow(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        uint256 nonce\\n    );\\n\\n    /**\\n     * An event emitted by handleOps(), before starting the execution loop.\\n     * Any event emitted before this event, is part of the validation.\\n     */\\n    event BeforeExecution();\\n\\n    /**\\n     * Signature aggregator used by the following UserOperationEvents within this bundle.\\n     * @param aggregator - The aggregator used for the following UserOperationEvents.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * A custom revert error of handleOps, to identify the offending op.\\n     * Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     * Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     * NOTE: If simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     * @param opIndex - Index into the array of ops to the failed one (in simulateValidation, this is always zero).\\n     * @param reason  - Revert reason. The string starts with a unique code \\\"AAmn\\\",\\n     *                  where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *                  so a failure can be attributed to the correct entity.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * A custom revert error of handleOps, to report a revert by account or paymaster.\\n     * @param opIndex - Index into the array of ops to the failed one (in simulateValidation, this is always zero).\\n     * @param reason  - Revert reason. see FailedOp(uint256,string), above\\n     * @param inner   - data from inner cought revert reason\\n     * @dev note that inner is truncated to 2048 bytes\\n     */\\n    error FailedOpWithRevert(uint256 opIndex, string reason, bytes inner);\\n\\n    error PostOpReverted(bytes returnData);\\n\\n    /**\\n     * Error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     * @param aggregator The aggregator that failed to verify the signature\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    // Return value of getSenderAddress.\\n    error SenderAddressResult(address sender);\\n\\n    // UserOps handled, per aggregator.\\n    struct UserOpsPerAggregator {\\n        PackedUserOperation[] userOps;\\n        // Aggregator address\\n        IAggregator aggregator;\\n        // Aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperations.\\n     * No signature aggregator is used.\\n     * If any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops         - The operations to execute.\\n     * @param beneficiary - The address to receive the fees.\\n     */\\n    function handleOps(\\n        PackedUserOperation[] calldata ops,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator - The operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts).\\n     * @param beneficiary      - The address to receive the fees.\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * Generate a request Id - unique identifier for this request.\\n     * The request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     * @param userOp - The user operation to generate the request ID for.\\n     * @return hash the hash of this UserOperation\\n     */\\n    function getUserOpHash(\\n        PackedUserOperation calldata userOp\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * Gas and return values during simulation.\\n     * @param preOpGas         - The gas used for validation (including preValidationGas)\\n     * @param prefund          - The required prefund for this operation\\n     * @param accountValidationData   - returned validationData from account.\\n     * @param paymasterValidationData - return validationData from paymaster.\\n     * @param paymasterContext - Returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        uint256 accountValidationData;\\n        uint256 paymasterValidationData;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * Returned aggregated signature info:\\n     * The aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     * Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * This method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode - The constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n    error DelegateAndRevert(bool success, bytes ret);\\n\\n    /**\\n     * Helper method for dry-run testing.\\n     * @dev calling this method, the EntryPoint will make a delegatecall to the given data, and report (via revert) the result.\\n     *  The method always revert, so is only useful off-chain for dry run calls, in cases where state-override to replace\\n     *  actual EntryPoint code is less convenient.\\n     * @param target a target contract to make a delegatecall from entrypoint\\n     * @param data data to pass to target in a delegatecall\\n     */\\n    function delegateAndRevert(address target, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x1972a5fcb3a808b58c85af5741949ef6af11ab0debd3ae8c708171ae1ae0d0c4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\",\"keccak256\":\"0xd575af0f6ebbd5f0b2933307d44cd7b4e03a69f4b817a67db5409bd3c89aeecb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./PackedUserOperation.sol\\\";\\n\\n/**\\n * The interface exposed by a paymaster contract, who agrees to pay the gas for user's operations.\\n * A paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\\n */\\ninterface IPaymaster {\\n    enum PostOpMode {\\n        // User op succeeded.\\n        opSucceeded,\\n        // User op reverted. Still has to pay for gas.\\n        opReverted,\\n        // Only used internally in the EntryPoint (cleanup after postOp reverts). Never calling paymaster with this value\\n        postOpReverted\\n    }\\n\\n    /**\\n     * Payment validation: check if paymaster agrees to pay.\\n     * Must verify sender is the entryPoint.\\n     * Revert to reject this request.\\n     * Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted).\\n     * The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\\n     * @param userOp          - The user operation.\\n     * @param userOpHash      - Hash of the user's request data.\\n     * @param maxCost         - The maximum cost of this transaction (based on maximum gas and gas price from userOp).\\n     * @return context        - Value to send to a postOp. Zero length to signify postOp is not required.\\n     * @return validationData - Signature and time-range of this operation, encoded the same as the return\\n     *                          value of validateUserOperation.\\n     *                          <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *                                                    other values are invalid for paymaster.\\n     *                          <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *                          <6-byte> validAfter - first timestamp this operation is valid\\n     *                          Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validatePaymasterUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 maxCost\\n    ) external returns (bytes memory context, uint256 validationData);\\n\\n    /**\\n     * Post-operation handler.\\n     * Must verify sender is the entryPoint.\\n     * @param mode          - Enum with the following options:\\n     *                        opSucceeded - User operation succeeded.\\n     *                        opReverted  - User op reverted. The paymaster still has to pay for gas.\\n     *                        postOpReverted - never passed in a call to postOp().\\n     * @param context       - The context value returned by validatePaymasterUserOp\\n     * @param actualGasCost - Actual gas used so far (without this postOp call).\\n     * @param actualUserOpFeePerGas - the gas price this UserOp pays. This value is based on the UserOp's maxFeePerGas\\n     *                        and maxPriorityFee (and basefee)\\n     *                        It is not the same as tx.gasprice, which is what the bundler pays.\\n     */\\n    function postOp(\\n        PostOpMode mode,\\n        bytes calldata context,\\n        uint256 actualGasCost,\\n        uint256 actualUserOpFeePerGas\\n    ) external;\\n}\\n\",\"keccak256\":\"0x49d8dbf8a85b006bcd89bbc40e4e9e113997cc016007de85263bdae70572d07f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.5;\\n\\n/**\\n * Manage deposits and stakes.\\n * Deposit is just a balance used to pay for UserOperations (either by a paymaster or an account).\\n * Stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n    event Deposited(address indexed account, uint256 totalDeposit);\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    // Emitted when stake or unstake delay are modified.\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    // Emitted once a stake is scheduled for withdrawal.\\n    event StakeUnlocked(address indexed account, uint256 withdrawTime);\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit         - The entity's deposit.\\n     * @param staked          - True if this entity is staked.\\n     * @param stake           - Actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec - Minimum delay to withdraw the stake.\\n     * @param withdrawTime    - First block timestamp where 'withdrawStake' will be callable, or zero if already locked.\\n     * @dev Sizes were chosen so that deposit fits into one cell (used during handleOp)\\n     *      and the rest fit into a 2nd cell (used during stake/unstake)\\n     *      - 112 bit allows for 10^15 eth\\n     *      - 48 bit for full timestamp\\n     *      - 32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint256 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    // API struct used by getStakeInfo and simulateValidation.\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /**\\n     * Get deposit info.\\n     * @param account - The account to query.\\n     * @return info   - Full deposit information of given account.\\n     */\\n    function getDepositInfo(\\n        address account\\n    ) external view returns (DepositInfo memory info);\\n\\n    /**\\n     * Get account balance.\\n     * @param account - The account to query.\\n     * @return        - The deposit (for gas payment) of the account.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * Add to the deposit of the given account.\\n     * @param account - The account to add to.\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * Add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec - The new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * Attempt to unlock the stake.\\n     * The value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * Withdraw from the (unlocked) stake.\\n     * Must first call unlockStake and wait for the unstakeDelay to pass.\\n     * @param withdrawAddress - The address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * Withdraw from the deposit.\\n     * @param withdrawAddress - The address to send withdrawn value.\\n     * @param withdrawAmount  - The amount to withdraw.\\n     */\\n    function withdrawTo(\\n        address payable withdrawAddress,\\n        uint256 withdrawAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbe5ca9e7f254d031687419e7b96ef48c9c63e9398bbe992dc72ffc6dc14e0a04\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/PackedUserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.5;\\n\\n/**\\n * User Operation struct\\n * @param sender                - The sender account of this request.\\n * @param nonce                 - Unique value the sender uses to verify it is not a replay.\\n * @param initCode              - If set, the account contract will be created by this constructor/\\n * @param callData              - The method call to execute on this account.\\n * @param accountGasLimits      - Packed gas limits for validateUserOp and gas limit passed to the callData method call.\\n * @param preVerificationGas    - Gas not calculated by the handleOps method, but added to the gas paid.\\n *                                Covers batch overhead.\\n * @param gasFees               - packed gas fields maxPriorityFeePerGas and maxFeePerGas - Same as EIP-1559 gas parameters.\\n * @param paymasterAndData      - If set, this field holds the paymaster address, verification gas limit, postOp gas limit and paymaster-specific extra data\\n *                                The paymaster will pay for the transaction instead of the sender.\\n * @param signature             - Sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n */\\nstruct PackedUserOperation {\\n    address sender;\\n    uint256 nonce;\\n    bytes initCode;\\n    bytes callData;\\n    bytes32 accountGasLimits;\\n    uint256 preVerificationGas;\\n    bytes32 gasFees;\\n    bytes paymasterAndData;\\n    bytes signature;\\n}\\n\",\"keccak256\":\"0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359\",\"license\":\"GPL-3.0\"},\"contracts/utils/Exec.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.23;\\n\\n// solhint-disable no-inline-assembly\\n\\n/**\\n * Utility functions helpful when making different kinds of contract calls in Solidity.\\n */\\nlibrary Exec {\\n\\n    function call(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n        }\\n    }\\n\\n    function staticcall(\\n        address to,\\n        bytes memory data,\\n        uint256 txGas\\n    ) internal view returns (bool success) {\\n        assembly (\\\"memory-safe\\\") {\\n            success := staticcall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n        }\\n    }\\n\\n    function delegateCall(\\n        address to,\\n        bytes memory data,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        assembly (\\\"memory-safe\\\") {\\n            success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n        }\\n    }\\n\\n    // get returned data from last call or calldelegate\\n    function getReturnData(uint256 maxLen) internal pure returns (bytes memory returnData) {\\n        assembly (\\\"memory-safe\\\") {\\n            let len := returndatasize()\\n            if gt(len, maxLen) {\\n                len := maxLen\\n            }\\n            let ptr := mload(0x40)\\n            mstore(0x40, add(ptr, add(len, 0x20)))\\n            mstore(ptr, len)\\n            returndatacopy(add(ptr, 0x20), 0, len)\\n            returnData := ptr\\n        }\\n    }\\n\\n    // revert with explicit byte array (probably reverted info from call)\\n    function revertWithData(bytes memory returnData) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            revert(add(returnData, 32), mload(returnData))\\n        }\\n    }\\n\\n    function callAndRevert(address to, bytes memory data, uint256 maxLen) internal {\\n        bool success = call(to,0,data,gasleft());\\n        if (!success) {\\n            revertWithData(getReturnData(maxLen));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86b1b1cd11158dddb9d381040c57fdc643c74b5e4eed3e7e036f32452672ad74\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a0604052604051620000129062000055565b604051809103906000f0801580156200002f573d6000803e3d6000fd5b506001600160a01b03166080523480156200004957600080fd5b50600160025562000063565b610213806200383383390190565b6080516137ad6200008660003960008181610e0f015261277b01526137ad6000f3fe60806040526004361061010c5760003560e01c806370a0823111610095578063b760faf911610064578063b760faf91461043d578063bb9fe6bf14610450578063c23a5cea14610465578063dbed18e014610485578063fc7e286d146104a557600080fd5b806370a08231146103a7578063765e827f146103dd578063850aaf62146103fd5780639b249f691461041d57600080fd5b80631b2e01b8116100dc5780631b2e01b8146101b7578063205c2878146101ef57806322cdde4c1461020f57806335567e1a1461022f5780635287ce121461028f57600080fd5b806242dc531461012157806301ffc9a7146101545780630396cb60146101845780630bd28e3b1461019757600080fd5b3661011c5761011a3361054d565b005b600080fd5b34801561012d57600080fd5b5061014161013c366004612cd7565b6105a2565b6040519081526020015b60405180910390f35b34801561016057600080fd5b5061017461016f366004612d96565b610725565b604051901515815260200161014b565b61011a610192366004612dc0565b6107ad565b3480156101a357600080fd5b5061011a6101b2366004612dfd565b610a34565b3480156101c357600080fd5b506101416101d2366004612e18565b600160209081526000928352604080842090915290825290205481565b3480156101fb57600080fd5b5061011a61020a366004612e4d565b610a6b565b34801561021b57600080fd5b5061014161022a366004612e79565b610bb8565b34801561023b57600080fd5b5061014161024a366004612e18565b6001600160a01b03821660009081526001602090815260408083206001600160c01b038516845290915290819020549082901b67ffffffffffffffff19161792915050565b34801561029b57600080fd5b5061034c6102aa366004612eb4565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b031660009081526020818152604091829020825160a0810184528154815260019091015460ff811615159282019290925261010082046001600160701b031692810192909252600160781b810463ffffffff166060830152600160981b900465ffffffffffff16608082015290565b60405161014b9190600060a082019050825182526020830151151560208301526001600160701b03604084015116604083015263ffffffff606084015116606083015265ffffffffffff608084015116608083015292915050565b3480156103b357600080fd5b506101416103c2366004612eb4565b6001600160a01b031660009081526020819052604090205490565b3480156103e957600080fd5b5061011a6103f8366004612f15565b610bfa565b34801561040957600080fd5b5061011a610418366004612f6b565b610d76565b34801561042957600080fd5b5061011a610438366004612fbf565b610df5565b61011a61044b366004612eb4565b61054d565b34801561045c57600080fd5b5061011a610eb0565b34801561047157600080fd5b5061011a610480366004612eb4565b610fdc565b34801561049157600080fd5b5061011a6104a0366004612f15565b6111fb565b3480156104b157600080fd5b5061050a6104c0366004612eb4565b6000602081905290815260409020805460019091015460ff81169061010081046001600160701b031690600160781b810463ffffffff1690600160981b900465ffffffffffff1685565b6040805195865293151560208601526001600160701b039092169284019290925263ffffffff909116606083015265ffffffffffff16608082015260a00161014b565b6000610559823461160e565b9050816001600160a01b03167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c48260405161059691815260200190565b60405180910390a25050565b6000805a90503330146105f65760405162461bcd60e51b81526020600482015260176024820152764141393220696e7465726e616c2063616c6c206f6e6c7960481b60448201526064015b60405180910390fd5b8451606081015160a082015181016127100160405a603f028161061b5761061b613000565b0410156106335763deaddead60e01b60005260206000fd5b8751600090156106c7576000610650846000015160008c86611641565b9050806106c5576000610664610800611659565b8051909150156106bf5784600001516001600160a01b03168a602001517f1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a2018760200151846040516106b6929190613066565b60405180910390a35b60019250505b505b600088608001515a8603019050610717828a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250611685915050565b9a9950505050505050505050565b60006001600160e01b0319821663307e35b760e11b148061075657506001600160e01b0319821663122a0e9b60e31b145b8061077157506001600160e01b0319821663cf28ef9760e01b145b8061078c57506001600160e01b03198216633e84f02160e01b145b806107a757506301ffc9a760e01b6001600160e01b03198316145b92915050565b33600090815260208190526040902063ffffffff821661080f5760405162461bcd60e51b815260206004820152601a60248201527f6d757374207370656369667920756e7374616b652064656c617900000000000060448201526064016105ed565b600181015463ffffffff600160781b909104811690831610156108745760405162461bcd60e51b815260206004820152601c60248201527f63616e6e6f7420646563726561736520756e7374616b652074696d650000000060448201526064016105ed565b600181015460009061089590349061010090046001600160701b0316613095565b9050600081116108dc5760405162461bcd60e51b81526020600482015260126024820152711b9bc81cdd185ad9481cdc1958da599a595960721b60448201526064016105ed565b6001600160701b038111156109245760405162461bcd60e51b815260206004820152600e60248201526d7374616b65206f766572666c6f7760901b60448201526064016105ed565b6040805160a08101825283548152600160208083018281526001600160701b0386811685870190815263ffffffff8a811660608801818152600060808a0181815233808352828a52918c90209a518b55965199909801805494519151965165ffffffffffff16600160981b0265ffffffffffff60981b1997909416600160781b029690961669ffffffffffffffffffff60781b1991909516610100026effffffffffffffffffffffffffff0019991515999099166001600160781b031990941693909317979097179190911691909117179055835185815290810192909252917fa5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01910160405180910390a2505050565b3360009081526001602090815260408083206001600160c01b03851684529091528120805491610a63836130a8565b919050555050565b3360009081526020819052604090208054821115610ac75760405162461bcd60e51b8152602060048201526019602482015278576974686472617720616d6f756e7420746f6f206c6172676560381b60448201526064016105ed565b8054610ad49083906130c1565b8155604080516001600160a01b03851681526020810184905233917fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb910160405180910390a26000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114610b67576040519150601f19603f3d011682016040523d82523d6000602084013e610b6c565b606091505b5050905080610bb25760405162461bcd60e51b81526020600482015260126024820152716661696c656420746f20776974686472617760701b60448201526064016105ed565b50505050565b6000610bc382611848565b6040805160208101929092523090820152466060820152608001604051602081830303815290604052805190602001209050919050565b610c02611861565b816000816001600160401b03811115610c1d57610c1d612ad7565b604051908082528060200260200182016040528015610c5657816020015b610c43612a3f565b815260200190600190039081610c3b5790505b50905060005b82811015610ccf576000828281518110610c7857610c786130d4565b60200260200101519050600080610cb3848a8a87818110610c9b57610c9b6130d4565b9050602002810190610cad91906130ea565b85611889565b91509150610cc48483836000611a82565b505050600101610c5c565b506040516000907fbb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972908290a160005b83811015610d5957610d4d81888884818110610d1c57610d1c6130d4565b9050602002810190610d2e91906130ea565b858481518110610d4057610d406130d4565b6020026020010151611c18565b90910190600101610cfe565b50610d648482611ed4565b505050610d716001600255565b505050565b600080846001600160a01b03168484604051610d9392919061310b565b600060405180830381855af49150503d8060008114610dce576040519150601f19603f3d011682016040523d82523d6000602084013e610dd3565b606091505b50915091508181604051632650415560e21b81526004016105ed92919061311b565b604051632b870d1b60e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063570e1a3690610e46908690869060040161315f565b6020604051808303816000875af1158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e899190613173565b604051633653dc0360e11b81526001600160a01b03821660048201529091506024016105ed565b33600090815260208190526040812060018101549091600160781b90910463ffffffff169003610f0f5760405162461bcd60e51b815260206004820152600a6024820152691b9bdd081cdd185ad95960b21b60448201526064016105ed565b600181015460ff16610f575760405162461bcd60e51b8152602060048201526011602482015270616c726561647920756e7374616b696e6760781b60448201526064016105ed565b6001810154600090610f7690600160781b900463ffffffff1642613190565b60018301805460ff65ffffffffffff60981b011916600160981b65ffffffffffff841690810260ff19169190911790915560405190815290915033907ffa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a90602001610596565b336000908152602081905260409020600181015461010090046001600160701b0316806110425760405162461bcd60e51b81526020600482015260146024820152734e6f207374616b6520746f20776974686472617760601b60448201526064016105ed565b6001820154600160981b900465ffffffffffff166110a25760405162461bcd60e51b815260206004820152601d60248201527f6d7573742063616c6c20756e6c6f636b5374616b65282920666972737400000060448201526064016105ed565b600182015442600160981b90910465ffffffffffff1611156111065760405162461bcd60e51b815260206004820152601b60248201527f5374616b65207769746864726177616c206973206e6f7420647565000000000060448201526064016105ed565b600182018054610100600160c81b0319169055604080516001600160a01b03851681526020810183905233917fb7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3910160405180910390a26000836001600160a01b03168260405160006040518083038185875af1925050503d80600081146111aa576040519150601f19603f3d011682016040523d82523d6000602084013e6111af565b606091505b5050905080610bb25760405162461bcd60e51b81526020600482015260186024820152776661696c656420746f207769746864726177207374616b6560401b60448201526064016105ed565b611203611861565b816000805b8281101561136a5736868683818110611223576112236130d4565b905060200281019061123591906131b6565b905036600061124483806131cc565b9092509050600061125b6040850160208601612eb4565b90506000196001600160a01b038216016112b15760405162461bcd60e51b815260206004820152601760248201527620a09c9b1034b73b30b634b21030b3b3b932b3b0ba37b960491b60448201526064016105ed565b6001600160a01b0381161561134e576001600160a01b038116632dd8113384846112de6040890189613215565b6040518563ffffffff1660e01b81526004016112fd949392919061337f565b60006040518083038186803b15801561131557600080fd5b505afa925050508015611326575060015b61134e5760405163086a9f7560e41b81526001600160a01b03821660048201526024016105ed565b6113588287613095565b95505060019093019250611208915050565b506000816001600160401b0381111561138557611385612ad7565b6040519080825280602002602001820160405280156113be57816020015b6113ab612a3f565b8152602001906001900390816113a35790505b5090506000805b8481101561149b57368888838181106113e0576113e06130d4565b90506020028101906113f291906131b6565b905036600061140183806131cc565b909250905060006114186040850160208601612eb4565b90508160005b8181101561148957600089898151811061143a5761143a6130d4565b6020026020010151905060008061145d8b898987818110610c9b57610c9b6130d4565b9150915061146d84838389611a82565b8a611477816130a8565b9b50506001909301925061141e915050565b5050600190940193506113c592505050565b506040517fbb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f97290600090a150600080805b858110156115c957368989838181106114e6576114e66130d4565b90506020028101906114f891906131b6565b905061150a6040820160208301612eb4565b6001600160a01b03167f575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d60405160405180910390a236600061154c83806131cc565b90925090508060005b818110156115b85761159788858584818110611573576115736130d4565b905060200281019061158591906130ea565b8b8b81518110610d4057610d406130d4565b6115a19088613095565b9650876115ad816130a8565b985050600101611555565b5050600190930192506114cb915050565b506040516000907f575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d908290a26115ff8682611ed4565b5050505050610d716001600255565b6001600160a01b038216600090815260208190526040812080548290611635908590613095565b91829055509392505050565b6000806000845160208601878987f195945050505050565b60603d828111156116675750815b604051602082018101604052818152816000602083013e9392505050565b6000805a85519091506000908161169b82611fc8565b60e08301519091506001600160a01b0381166116ba5782519350611776565b80935060008851111561177657868202955060028a60028111156116e0576116e06133fc565b146117765760a0830151604051637c627b2160e01b81526001600160a01b03831691637c627b219161171c908e908d908c908990600401613412565b600060405180830381600088803b15801561173657600080fd5b5087f193505050508015611748575060015b611776576000611759610800611659565b905080604051632b5e552f60e21b81526004016105ed919061345c565b5a60a0840151606085015160808c0151928803999099019801908803808211156117a9576064600a828403020498909801975b505060408901518783029650868110156118055760028b60028111156117d1576117d16133fc565b036117f4578096506117e28a611ffa565b6117ef8a6000898b612049565b61183a565b63deadaa5160e01b60005260206000fd5b868103611812868261160e565b506000808d6002811115611828576118286133fc565b1490506118378c828b8d612049565b50505b505050505050949350505050565b6000611853826120c4565b805190602001209050919050565b600280540361188357604051633ee5aeb560e01b815260040160405180910390fd5b60028055565b60008060005a845190915061189e868261217c565b6118a786610bb8565b6020860152604081015161012082015161010083015160a08401516080850151606086015160c0870151861717171717176001600160781b0381111561192a5760405162461bcd60e51b815260206004820152601860248201527741413934206761732076616c756573206f766572666c6f7760401b60448201526064016105ed565b60006119598460c081015160a08201516080830151606084015160408501516101009095015194010101010290565b90506119688a8a8a848761228a565b965061197c8460000151856020015161241b565b6119d25789604051631101335b60e11b81526004016105ed918152604060208201819052601a908201527f4141323520696e76616c6964206163636f756e74206e6f6e6365000000000000606082015260800190565b825a86031115611a2e5789604051631101335b60e11b81526004016105ed918152604060208201819052601e908201527f41413236206f76657220766572696669636174696f6e4761734c696d69740000606082015260800190565b60e08401516060906001600160a01b031615611a5557611a508b8b8b85612468565b975090505b604089018290528060608a015260a08a01355a870301896080018181525050505050505050935093915050565b600080611a8e85612626565b91509150816001600160a01b0316836001600160a01b031614611af45785604051631101335b60e11b81526004016105ed9181526040602082018190526014908201527320a0991a1039b4b3b730ba3ab9329032b93937b960611b606082015260800190565b8015611b465785604051631101335b60e11b81526004016105ed91815260406020820181905260179082015276414132322065787069726564206f72206e6f742064756560481b606082015260800190565b6000611b5185612626565b925090506001600160a01b03811615611bad5786604051631101335b60e11b81526004016105ed9181526040602082018190526014908201527320a0999a1039b4b3b730ba3ab9329032b93937b960611b606082015260800190565b8115611c0f5786604051631101335b60e11b81526004016105ed9181526040602082018190526021908201527f41413332207061796d61737465722065787069726564206f72206e6f742064756060820152606560f81b608082015260a00190565b50505050505050565b6000805a90506000611c2b846060015190565b6040519091506000903682611c4360608a018a613215565b9150915060606000826003811115611c5a57843591505b506372288ed160e01b6001600160e01b0319821601611d085760008b8b60200151604051602401611c8c92919061346f565b60408051601f198184030181529181526020820180516001600160e01b0316638dd7712f60e01b1790525190915030906242dc5390611cd39084908f908d9060240161353b565b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050925050611d5d565b306001600160a01b03166242dc5385858d8b604051602401611d2d949392919061357b565b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505091505b602060008351602085016000305af19550600051985084604052505050505080611eca5760003d80602003611d985760206000803e60005191505b5063deaddead60e01b8103611deb5787604051631101335b60e11b81526004016105ed918152604060208201819052600f908201526e41413935206f7574206f662067617360881b606082015260800190565b63deadaa5160e01b8103611e3c57600086608001515a611e0b90876130c1565b611e159190613095565b6040880151909150611e2688611ffa565b611e338860008385612049565b9550611ec89050565b855180516020808901519201516001600160a01b0390911691907ff62676f440ff169a3a9afdbf812e89e7f95975ee8e5c31214ffdef631c5f479290611e83610800611659565b604051611e91929190613066565b60405180910390a3600086608001515a611eab90876130c1565b611eb59190613095565b9050611ec46002888684611685565b9550505b505b5050509392505050565b6001600160a01b038216611f255760405162461bcd60e51b81526020600482015260186024820152774141393020696e76616c69642062656e656669636961727960401b60448201526064016105ed565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611f72576040519150601f19603f3d011682016040523d82523d6000602084013e611f77565b606091505b5050905080610d715760405162461bcd60e51b815260206004820152601f60248201527f41413931206661696c65642073656e6420746f2062656e65666963696172790060448201526064016105ed565b61010081015161012082015160009190808203611fe6575092915050565b611ff282488301612679565b949350505050565b80518051602080840151928101516040519081526001600160a01b0390921692917f67b4fa9642f42120bf031f3051d1824b0fe25627945b27b8a6a65d5761d5482e910160405180910390a350565b835160e081015181516020808801519301516040516001600160a01b039384169492909316927f49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f916120b69189908990899093845291151560208401526040830152606082015260800190565b60405180910390a450505050565b60608135602083013560006120e46120df6040870187613215565b612691565b905060006120f86120df6060880188613215565b9050608086013560a087013560c0880135600061211b6120df60e08c018c613215565b604080516001600160a01b039a909a1660208b015289810198909852606089019690965250608087019390935260a086019190915260c085015260e08401526101008084019190915281518084039091018152610120909201905292915050565b6121896020830183612eb4565b6001600160a01b03168152602082810135908201526001600160801b036080808401358281166060850152811c604084015260a084013560c0808501919091528401359182166101008401521c6101208201523660006121ec60e0850185613215565b9092509050801561226f5760348110156122485760405162461bcd60e51b815260206004820152601d60248201527f4141393320696e76616c6964207061796d6173746572416e644461746100000060448201526064016105ed565b61225282826126a4565b60a086015260808501526001600160a01b031660e0840152610bb2565b600060e084018190526080840181905260a084015250505050565b82518051600091906122a988876122a460408b018b613215565b61270c565b60e082015160006001600160a01b0382166122ed576001600160a01b0383166000908152602081905260409020548781116122e6578088036122e9565b60005b9150505b60208801516040516306608bdf60e21b81526001600160a01b038516916319822f7c918991612323918e919087906004016135b2565b60206040518083038160008887f19350505050801561235f575060408051601f3d908101601f1916820190925261235c918101906135d7565b60015b61238a578961236f610800611659565b6040516365c8fd4d60e01b81526004016105ed9291906135f0565b94506001600160a01b03821661240e576001600160a01b0383166000908152602081905260409020805480891115612408578b604051631101335b60e11b81526004016105ed9181526040602082018190526017908201527610504c8c48191a591b89dd081c185e481c1c99599d5b99604a1b606082015260800190565b88900390555b5050505095945050505050565b6001600160a01b038216600090815260016020908152604080832084821c80855292528220805484916001600160401b03831691908561245a836130a8565b909155501495945050505050565b60606000805a855160e08101516001600160a01b038116600090815260208190526040902080549394509192909190878110156124f1578a604051631101335b60e11b81526004016105ed918152604060208201819052601e908201527f41413331207061796d6173746572206465706f73697420746f6f206c6f770000606082015260800190565b8781038260000181905550600084608001519050836001600160a01b03166352b7512c828d8d602001518d6040518563ffffffff1660e01b815260040161253a939291906135b2565b60006040518083038160008887f19350505050801561257b57506040513d6000823e601f3d908101601f19168201604052612578919081019061362d565b60015b6125a6578b61258b610800611659565b6040516365c8fd4d60e01b81526004016105ed9291906136ad565b9098509650805a87031115612617578b604051631101335b60e11b81526004016105ed9181526040602082018190526027908201527f41413336206f766572207061796d6173746572566572696669636174696f6e47606082015266185cd31a5b5a5d60ca1b608082015260a00190565b50505050505094509492505050565b6000808260000361263c57506000928392509050565b6000612647846129ce565b9050806040015165ffffffffffff1642118061266e5750806020015165ffffffffffff1642105b905194909350915050565b6000818310612688578161268a565b825b9392505050565b6000604051828085833790209392505050565b600080806126b560148286886136ea565b6126be91613714565b60601c6126cf6024601487896136ea565b6126d891613749565b60801c6126e960346024888a6136ea565b6126f291613749565b9194506001600160801b0316925060801c90509250925092565b8015610bb2578251516001600160a01b0381163b156127775784604051631101335b60e11b81526004016105ed918152604060208201819052601f908201527f414131302073656e64657220616c726561647920636f6e737472756374656400606082015260800190565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570e1a3686600001516040015186866040518463ffffffff1660e01b81526004016127d092919061315f565b60206040518083038160008887f11580156127ef573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906128149190613173565b90506001600160a01b0381166128765785604051631101335b60e11b81526004016105ed918152604060208201819052601b908201527f4141313320696e6974436f6465206661696c6564206f72204f4f470000000000606082015260800190565b816001600160a01b0316816001600160a01b0316146128e05785604051631101335b60e11b81526004016105ed91815260406020808301829052908201527f4141313420696e6974436f6465206d7573742072657475726e2073656e646572606082015260800190565b806001600160a01b03163b6000036129435785604051631101335b60e11b81526004016105ed91815260406020808301829052908201527f4141313520696e6974436f6465206d757374206372656174652073656e646572606082015260800190565b600061295260148286886136ea565b61295b91613714565b60601c9050826001600160a01b031686602001517fd51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d83896000015160e001516040516129bd9291906001600160a01b0392831681529116602082015260400190565b60405180910390a350505050505050565b60408051606081018252600080825260208201819052918101919091528160a081901c65ffffffffffff8116600003612a0a575065ffffffffffff5b604080516060810182526001600160a01b03909316835260d09490941c602083015265ffffffffffff16928101929092525090565b6040518060a00160405280612ab260405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b8152602001600080191681526020016000815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715612b0f57612b0f612ad7565b60405290565b60405161014081016001600160401b0381118282101715612b0f57612b0f612ad7565b604051601f8201601f191681016001600160401b0381118282101715612b6057612b60612ad7565b604052919050565b60006001600160401b03821115612b8157612b81612ad7565b50601f01601f191660200190565b6001600160a01b0381168114612ba457600080fd5b50565b8035612bb281612b8f565b919050565b60008183036101c0811215612bcb57600080fd5b612bd3612aed565b915061014080821215612be557600080fd5b612bed612b15565b9150612bf884612ba7565b82526020840135602083015260408401356040830152606084013560608301526080840135608083015260a084013560a083015260c084013560c0830152612c4260e08501612ba7565b60e0830152610100848101359083015261012080850135908301529082528201356020820152610160820135604082015261018082013560608201526101a0909101356080820152919050565b60008083601f840112612ca157600080fd5b5081356001600160401b03811115612cb857600080fd5b602083019150836020828501011115612cd057600080fd5b9250929050565b6000806000806102008587031215612cee57600080fd5b84356001600160401b0380821115612d0557600080fd5b818701915087601f830112612d1957600080fd5b8135612d2c612d2782612b68565b612b38565b818152896020838601011115612d4157600080fd5b816020850160208301376000602083830101528097505050612d668860208901612bb7565b94506101e0870135915080821115612d7d57600080fd5b50612d8a87828801612c8f565b95989497509550505050565b600060208284031215612da857600080fd5b81356001600160e01b03198116811461268a57600080fd5b600060208284031215612dd257600080fd5b813563ffffffff8116811461268a57600080fd5b80356001600160c01b0381168114612bb257600080fd5b600060208284031215612e0f57600080fd5b61268a82612de6565b60008060408385031215612e2b57600080fd5b8235612e3681612b8f565b9150612e4460208401612de6565b90509250929050565b60008060408385031215612e6057600080fd5b8235612e6b81612b8f565b946020939093013593505050565b600060208284031215612e8b57600080fd5b81356001600160401b03811115612ea157600080fd5b8201610120818503121561268a57600080fd5b600060208284031215612ec657600080fd5b813561268a81612b8f565b60008083601f840112612ee357600080fd5b5081356001600160401b03811115612efa57600080fd5b6020830191508360208260051b8501011115612cd057600080fd5b600080600060408486031215612f2a57600080fd5b83356001600160401b03811115612f4057600080fd5b612f4c86828701612ed1565b9094509250506020840135612f6081612b8f565b809150509250925092565b600080600060408486031215612f8057600080fd5b8335612f8b81612b8f565b925060208401356001600160401b03811115612fa657600080fd5b612fb286828701612c8f565b9497909650939450505050565b60008060208385031215612fd257600080fd5b82356001600160401b03811115612fe857600080fd5b612ff485828601612c8f565b90969095509350505050565b634e487b7160e01b600052601260045260246000fd5b60005b83811015613031578181015183820152602001613019565b50506000910152565b60008151808452613052816020860160208601613016565b601f01601f19169290920160200192915050565b828152604060208201526000611ff2604083018461303a565b634e487b7160e01b600052601160045260246000fd5b808201808211156107a7576107a761307f565b6000600182016130ba576130ba61307f565b5060010190565b818103818111156107a7576107a761307f565b634e487b7160e01b600052603260045260246000fd5b6000823561011e1983360301811261310157600080fd5b9190910192915050565b8183823760009101908152919050565b8215158152604060208201526000611ff2604083018461303a565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000611ff2602083018486613136565b60006020828403121561318557600080fd5b815161268a81612b8f565b65ffffffffffff8181168382160190808211156131af576131af61307f565b5092915050565b60008235605e1983360301811261310157600080fd5b6000808335601e198436030181126131e357600080fd5b8301803591506001600160401b038211156131fd57600080fd5b6020019150600581901b3603821315612cd057600080fd5b6000808335601e1984360301811261322c57600080fd5b8301803591506001600160401b0382111561324657600080fd5b602001915036819003821315612cd057600080fd5b6000808335601e1984360301811261327257600080fd5b83016020810192503590506001600160401b0381111561329157600080fd5b803603821315612cd057600080fd5b60006101206132bf846132b285612ba7565b6001600160a01b03169052565b602083013560208501526132d6604084018461325b565b8260408701526132e98387018284613136565b925050506132fa606084018461325b565b858303606087015261330d838284613136565b925050506080830135608085015260a083013560a085015260c083013560c085015261333c60e084018461325b565b85830360e087015261334f838284613136565b925050506101006133628185018561325b565b86840383880152613374848284613136565b979650505050505050565b6040808252810184905260006060600586901b830181019083018783805b898110156133e557868503605f190184528235368c900361011e190181126133c3578283fd5b6133cf868d83016132a0565b955050602093840193929092019160010161339d565b505050508281036020840152613374818587613136565b634e487b7160e01b600052602160045260246000fd5b60006003861061343257634e487b7160e01b600052602160045260246000fd5b85825260806020830152613449608083018661303a565b6040830194909452506060015292915050565b60208152600061268a602083018461303a565b60408152600061348260408301856132a0565b90508260208301529392505050565b805180516001600160a01b031683526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c084015260e08101516134f660e08501826001600160a01b03169052565b5061010081810151908401526101209081015190830152602081015161014083015260408101516101608301526060810151610180830152608001516101a090910152565b600061020080835261354f8184018761303a565b905061355e6020840186613491565b8281036101e0840152613571818561303a565b9695505050505050565b60006102008083526135908184018789613136565b905061359f6020840186613491565b8281036101e0840152613374818561303a565b6060815260006135c560608301866132a0565b60208301949094525060400152919050565b6000602082840312156135e957600080fd5b5051919050565b82815260606020820152600d60608201526c10504c8cc81c995d995c9d1959609a1b608082015260a060408201526000611ff260a083018461303a565b6000806040838503121561364057600080fd5b82516001600160401b0381111561365657600080fd5b8301601f8101851361366757600080fd5b8051613675612d2782612b68565b81815286602083850101111561368a57600080fd5b61369b826020830160208601613016565b60209590950151949694955050505050565b82815260606020820152600d60608201526c10504cccc81c995d995c9d1959609a1b608082015260a060408201526000611ff260a083018461303a565b600080858511156136fa57600080fd5b8386111561370757600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156137415780818660140360031b1b83161692505b505092915050565b6001600160801b031981358181169160108510156137415760109490940360031b84901b169092169291505056fea2646970667358221220b45894ede92b99974ebc1ea2b14b15933078f1e0d22c5d02801223ec2722bb7264736f6c63430008180033608060405234801561001057600080fd5b506101f3806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063570e1a3614610030575b600080fd5b61004361003e3660046100ec565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60008061006f601482858761015e565b61007891610188565b60601c9050600061008c846014818861015e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525084519495509360209350849250905082850182875af190506000519350806100e357600093505b50505092915050565b600080602083850312156100ff57600080fd5b823567ffffffffffffffff8082111561011757600080fd5b818501915085601f83011261012b57600080fd5b81358181111561013a57600080fd5b86602082850101111561014c57600080fd5b60209290920196919550909350505050565b6000808585111561016e57600080fd5b8386111561017b57600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156101b55780818660140360031b1b83161692505b50509291505056fea264697066735822122076d57a6eabf35a4d834285c516c95545068719a7375fe090201d2121368555b064736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061010c5760003560e01c806370a0823111610095578063b760faf911610064578063b760faf91461043d578063bb9fe6bf14610450578063c23a5cea14610465578063dbed18e014610485578063fc7e286d146104a557600080fd5b806370a08231146103a7578063765e827f146103dd578063850aaf62146103fd5780639b249f691461041d57600080fd5b80631b2e01b8116100dc5780631b2e01b8146101b7578063205c2878146101ef57806322cdde4c1461020f57806335567e1a1461022f5780635287ce121461028f57600080fd5b806242dc531461012157806301ffc9a7146101545780630396cb60146101845780630bd28e3b1461019757600080fd5b3661011c5761011a3361054d565b005b600080fd5b34801561012d57600080fd5b5061014161013c366004612cd7565b6105a2565b6040519081526020015b60405180910390f35b34801561016057600080fd5b5061017461016f366004612d96565b610725565b604051901515815260200161014b565b61011a610192366004612dc0565b6107ad565b3480156101a357600080fd5b5061011a6101b2366004612dfd565b610a34565b3480156101c357600080fd5b506101416101d2366004612e18565b600160209081526000928352604080842090915290825290205481565b3480156101fb57600080fd5b5061011a61020a366004612e4d565b610a6b565b34801561021b57600080fd5b5061014161022a366004612e79565b610bb8565b34801561023b57600080fd5b5061014161024a366004612e18565b6001600160a01b03821660009081526001602090815260408083206001600160c01b038516845290915290819020549082901b67ffffffffffffffff19161792915050565b34801561029b57600080fd5b5061034c6102aa366004612eb4565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b031660009081526020818152604091829020825160a0810184528154815260019091015460ff811615159282019290925261010082046001600160701b031692810192909252600160781b810463ffffffff166060830152600160981b900465ffffffffffff16608082015290565b60405161014b9190600060a082019050825182526020830151151560208301526001600160701b03604084015116604083015263ffffffff606084015116606083015265ffffffffffff608084015116608083015292915050565b3480156103b357600080fd5b506101416103c2366004612eb4565b6001600160a01b031660009081526020819052604090205490565b3480156103e957600080fd5b5061011a6103f8366004612f15565b610bfa565b34801561040957600080fd5b5061011a610418366004612f6b565b610d76565b34801561042957600080fd5b5061011a610438366004612fbf565b610df5565b61011a61044b366004612eb4565b61054d565b34801561045c57600080fd5b5061011a610eb0565b34801561047157600080fd5b5061011a610480366004612eb4565b610fdc565b34801561049157600080fd5b5061011a6104a0366004612f15565b6111fb565b3480156104b157600080fd5b5061050a6104c0366004612eb4565b6000602081905290815260409020805460019091015460ff81169061010081046001600160701b031690600160781b810463ffffffff1690600160981b900465ffffffffffff1685565b6040805195865293151560208601526001600160701b039092169284019290925263ffffffff909116606083015265ffffffffffff16608082015260a00161014b565b6000610559823461160e565b9050816001600160a01b03167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c48260405161059691815260200190565b60405180910390a25050565b6000805a90503330146105f65760405162461bcd60e51b81526020600482015260176024820152764141393220696e7465726e616c2063616c6c206f6e6c7960481b60448201526064015b60405180910390fd5b8451606081015160a082015181016127100160405a603f028161061b5761061b613000565b0410156106335763deaddead60e01b60005260206000fd5b8751600090156106c7576000610650846000015160008c86611641565b9050806106c5576000610664610800611659565b8051909150156106bf5784600001516001600160a01b03168a602001517f1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a2018760200151846040516106b6929190613066565b60405180910390a35b60019250505b505b600088608001515a8603019050610717828a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250611685915050565b9a9950505050505050505050565b60006001600160e01b0319821663307e35b760e11b148061075657506001600160e01b0319821663122a0e9b60e31b145b8061077157506001600160e01b0319821663cf28ef9760e01b145b8061078c57506001600160e01b03198216633e84f02160e01b145b806107a757506301ffc9a760e01b6001600160e01b03198316145b92915050565b33600090815260208190526040902063ffffffff821661080f5760405162461bcd60e51b815260206004820152601a60248201527f6d757374207370656369667920756e7374616b652064656c617900000000000060448201526064016105ed565b600181015463ffffffff600160781b909104811690831610156108745760405162461bcd60e51b815260206004820152601c60248201527f63616e6e6f7420646563726561736520756e7374616b652074696d650000000060448201526064016105ed565b600181015460009061089590349061010090046001600160701b0316613095565b9050600081116108dc5760405162461bcd60e51b81526020600482015260126024820152711b9bc81cdd185ad9481cdc1958da599a595960721b60448201526064016105ed565b6001600160701b038111156109245760405162461bcd60e51b815260206004820152600e60248201526d7374616b65206f766572666c6f7760901b60448201526064016105ed565b6040805160a08101825283548152600160208083018281526001600160701b0386811685870190815263ffffffff8a811660608801818152600060808a0181815233808352828a52918c90209a518b55965199909801805494519151965165ffffffffffff16600160981b0265ffffffffffff60981b1997909416600160781b029690961669ffffffffffffffffffff60781b1991909516610100026effffffffffffffffffffffffffff0019991515999099166001600160781b031990941693909317979097179190911691909117179055835185815290810192909252917fa5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01910160405180910390a2505050565b3360009081526001602090815260408083206001600160c01b03851684529091528120805491610a63836130a8565b919050555050565b3360009081526020819052604090208054821115610ac75760405162461bcd60e51b8152602060048201526019602482015278576974686472617720616d6f756e7420746f6f206c6172676560381b60448201526064016105ed565b8054610ad49083906130c1565b8155604080516001600160a01b03851681526020810184905233917fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb910160405180910390a26000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114610b67576040519150601f19603f3d011682016040523d82523d6000602084013e610b6c565b606091505b5050905080610bb25760405162461bcd60e51b81526020600482015260126024820152716661696c656420746f20776974686472617760701b60448201526064016105ed565b50505050565b6000610bc382611848565b6040805160208101929092523090820152466060820152608001604051602081830303815290604052805190602001209050919050565b610c02611861565b816000816001600160401b03811115610c1d57610c1d612ad7565b604051908082528060200260200182016040528015610c5657816020015b610c43612a3f565b815260200190600190039081610c3b5790505b50905060005b82811015610ccf576000828281518110610c7857610c786130d4565b60200260200101519050600080610cb3848a8a87818110610c9b57610c9b6130d4565b9050602002810190610cad91906130ea565b85611889565b91509150610cc48483836000611a82565b505050600101610c5c565b506040516000907fbb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972908290a160005b83811015610d5957610d4d81888884818110610d1c57610d1c6130d4565b9050602002810190610d2e91906130ea565b858481518110610d4057610d406130d4565b6020026020010151611c18565b90910190600101610cfe565b50610d648482611ed4565b505050610d716001600255565b505050565b600080846001600160a01b03168484604051610d9392919061310b565b600060405180830381855af49150503d8060008114610dce576040519150601f19603f3d011682016040523d82523d6000602084013e610dd3565b606091505b50915091508181604051632650415560e21b81526004016105ed92919061311b565b604051632b870d1b60e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063570e1a3690610e46908690869060040161315f565b6020604051808303816000875af1158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e899190613173565b604051633653dc0360e11b81526001600160a01b03821660048201529091506024016105ed565b33600090815260208190526040812060018101549091600160781b90910463ffffffff169003610f0f5760405162461bcd60e51b815260206004820152600a6024820152691b9bdd081cdd185ad95960b21b60448201526064016105ed565b600181015460ff16610f575760405162461bcd60e51b8152602060048201526011602482015270616c726561647920756e7374616b696e6760781b60448201526064016105ed565b6001810154600090610f7690600160781b900463ffffffff1642613190565b60018301805460ff65ffffffffffff60981b011916600160981b65ffffffffffff841690810260ff19169190911790915560405190815290915033907ffa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a90602001610596565b336000908152602081905260409020600181015461010090046001600160701b0316806110425760405162461bcd60e51b81526020600482015260146024820152734e6f207374616b6520746f20776974686472617760601b60448201526064016105ed565b6001820154600160981b900465ffffffffffff166110a25760405162461bcd60e51b815260206004820152601d60248201527f6d7573742063616c6c20756e6c6f636b5374616b65282920666972737400000060448201526064016105ed565b600182015442600160981b90910465ffffffffffff1611156111065760405162461bcd60e51b815260206004820152601b60248201527f5374616b65207769746864726177616c206973206e6f7420647565000000000060448201526064016105ed565b600182018054610100600160c81b0319169055604080516001600160a01b03851681526020810183905233917fb7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3910160405180910390a26000836001600160a01b03168260405160006040518083038185875af1925050503d80600081146111aa576040519150601f19603f3d011682016040523d82523d6000602084013e6111af565b606091505b5050905080610bb25760405162461bcd60e51b81526020600482015260186024820152776661696c656420746f207769746864726177207374616b6560401b60448201526064016105ed565b611203611861565b816000805b8281101561136a5736868683818110611223576112236130d4565b905060200281019061123591906131b6565b905036600061124483806131cc565b9092509050600061125b6040850160208601612eb4565b90506000196001600160a01b038216016112b15760405162461bcd60e51b815260206004820152601760248201527620a09c9b1034b73b30b634b21030b3b3b932b3b0ba37b960491b60448201526064016105ed565b6001600160a01b0381161561134e576001600160a01b038116632dd8113384846112de6040890189613215565b6040518563ffffffff1660e01b81526004016112fd949392919061337f565b60006040518083038186803b15801561131557600080fd5b505afa925050508015611326575060015b61134e5760405163086a9f7560e41b81526001600160a01b03821660048201526024016105ed565b6113588287613095565b95505060019093019250611208915050565b506000816001600160401b0381111561138557611385612ad7565b6040519080825280602002602001820160405280156113be57816020015b6113ab612a3f565b8152602001906001900390816113a35790505b5090506000805b8481101561149b57368888838181106113e0576113e06130d4565b90506020028101906113f291906131b6565b905036600061140183806131cc565b909250905060006114186040850160208601612eb4565b90508160005b8181101561148957600089898151811061143a5761143a6130d4565b6020026020010151905060008061145d8b898987818110610c9b57610c9b6130d4565b9150915061146d84838389611a82565b8a611477816130a8565b9b50506001909301925061141e915050565b5050600190940193506113c592505050565b506040517fbb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f97290600090a150600080805b858110156115c957368989838181106114e6576114e66130d4565b90506020028101906114f891906131b6565b905061150a6040820160208301612eb4565b6001600160a01b03167f575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d60405160405180910390a236600061154c83806131cc565b90925090508060005b818110156115b85761159788858584818110611573576115736130d4565b905060200281019061158591906130ea565b8b8b81518110610d4057610d406130d4565b6115a19088613095565b9650876115ad816130a8565b985050600101611555565b5050600190930192506114cb915050565b506040516000907f575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d908290a26115ff8682611ed4565b5050505050610d716001600255565b6001600160a01b038216600090815260208190526040812080548290611635908590613095565b91829055509392505050565b6000806000845160208601878987f195945050505050565b60603d828111156116675750815b604051602082018101604052818152816000602083013e9392505050565b6000805a85519091506000908161169b82611fc8565b60e08301519091506001600160a01b0381166116ba5782519350611776565b80935060008851111561177657868202955060028a60028111156116e0576116e06133fc565b146117765760a0830151604051637c627b2160e01b81526001600160a01b03831691637c627b219161171c908e908d908c908990600401613412565b600060405180830381600088803b15801561173657600080fd5b5087f193505050508015611748575060015b611776576000611759610800611659565b905080604051632b5e552f60e21b81526004016105ed919061345c565b5a60a0840151606085015160808c0151928803999099019801908803808211156117a9576064600a828403020498909801975b505060408901518783029650868110156118055760028b60028111156117d1576117d16133fc565b036117f4578096506117e28a611ffa565b6117ef8a6000898b612049565b61183a565b63deadaa5160e01b60005260206000fd5b868103611812868261160e565b506000808d6002811115611828576118286133fc565b1490506118378c828b8d612049565b50505b505050505050949350505050565b6000611853826120c4565b805190602001209050919050565b600280540361188357604051633ee5aeb560e01b815260040160405180910390fd5b60028055565b60008060005a845190915061189e868261217c565b6118a786610bb8565b6020860152604081015161012082015161010083015160a08401516080850151606086015160c0870151861717171717176001600160781b0381111561192a5760405162461bcd60e51b815260206004820152601860248201527741413934206761732076616c756573206f766572666c6f7760401b60448201526064016105ed565b60006119598460c081015160a08201516080830151606084015160408501516101009095015194010101010290565b90506119688a8a8a848761228a565b965061197c8460000151856020015161241b565b6119d25789604051631101335b60e11b81526004016105ed918152604060208201819052601a908201527f4141323520696e76616c6964206163636f756e74206e6f6e6365000000000000606082015260800190565b825a86031115611a2e5789604051631101335b60e11b81526004016105ed918152604060208201819052601e908201527f41413236206f76657220766572696669636174696f6e4761734c696d69740000606082015260800190565b60e08401516060906001600160a01b031615611a5557611a508b8b8b85612468565b975090505b604089018290528060608a015260a08a01355a870301896080018181525050505050505050935093915050565b600080611a8e85612626565b91509150816001600160a01b0316836001600160a01b031614611af45785604051631101335b60e11b81526004016105ed9181526040602082018190526014908201527320a0991a1039b4b3b730ba3ab9329032b93937b960611b606082015260800190565b8015611b465785604051631101335b60e11b81526004016105ed91815260406020820181905260179082015276414132322065787069726564206f72206e6f742064756560481b606082015260800190565b6000611b5185612626565b925090506001600160a01b03811615611bad5786604051631101335b60e11b81526004016105ed9181526040602082018190526014908201527320a0999a1039b4b3b730ba3ab9329032b93937b960611b606082015260800190565b8115611c0f5786604051631101335b60e11b81526004016105ed9181526040602082018190526021908201527f41413332207061796d61737465722065787069726564206f72206e6f742064756060820152606560f81b608082015260a00190565b50505050505050565b6000805a90506000611c2b846060015190565b6040519091506000903682611c4360608a018a613215565b9150915060606000826003811115611c5a57843591505b506372288ed160e01b6001600160e01b0319821601611d085760008b8b60200151604051602401611c8c92919061346f565b60408051601f198184030181529181526020820180516001600160e01b0316638dd7712f60e01b1790525190915030906242dc5390611cd39084908f908d9060240161353b565b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050925050611d5d565b306001600160a01b03166242dc5385858d8b604051602401611d2d949392919061357b565b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505091505b602060008351602085016000305af19550600051985084604052505050505080611eca5760003d80602003611d985760206000803e60005191505b5063deaddead60e01b8103611deb5787604051631101335b60e11b81526004016105ed918152604060208201819052600f908201526e41413935206f7574206f662067617360881b606082015260800190565b63deadaa5160e01b8103611e3c57600086608001515a611e0b90876130c1565b611e159190613095565b6040880151909150611e2688611ffa565b611e338860008385612049565b9550611ec89050565b855180516020808901519201516001600160a01b0390911691907ff62676f440ff169a3a9afdbf812e89e7f95975ee8e5c31214ffdef631c5f479290611e83610800611659565b604051611e91929190613066565b60405180910390a3600086608001515a611eab90876130c1565b611eb59190613095565b9050611ec46002888684611685565b9550505b505b5050509392505050565b6001600160a01b038216611f255760405162461bcd60e51b81526020600482015260186024820152774141393020696e76616c69642062656e656669636961727960401b60448201526064016105ed565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611f72576040519150601f19603f3d011682016040523d82523d6000602084013e611f77565b606091505b5050905080610d715760405162461bcd60e51b815260206004820152601f60248201527f41413931206661696c65642073656e6420746f2062656e65666963696172790060448201526064016105ed565b61010081015161012082015160009190808203611fe6575092915050565b611ff282488301612679565b949350505050565b80518051602080840151928101516040519081526001600160a01b0390921692917f67b4fa9642f42120bf031f3051d1824b0fe25627945b27b8a6a65d5761d5482e910160405180910390a350565b835160e081015181516020808801519301516040516001600160a01b039384169492909316927f49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f916120b69189908990899093845291151560208401526040830152606082015260800190565b60405180910390a450505050565b60608135602083013560006120e46120df6040870187613215565b612691565b905060006120f86120df6060880188613215565b9050608086013560a087013560c0880135600061211b6120df60e08c018c613215565b604080516001600160a01b039a909a1660208b015289810198909852606089019690965250608087019390935260a086019190915260c085015260e08401526101008084019190915281518084039091018152610120909201905292915050565b6121896020830183612eb4565b6001600160a01b03168152602082810135908201526001600160801b036080808401358281166060850152811c604084015260a084013560c0808501919091528401359182166101008401521c6101208201523660006121ec60e0850185613215565b9092509050801561226f5760348110156122485760405162461bcd60e51b815260206004820152601d60248201527f4141393320696e76616c6964207061796d6173746572416e644461746100000060448201526064016105ed565b61225282826126a4565b60a086015260808501526001600160a01b031660e0840152610bb2565b600060e084018190526080840181905260a084015250505050565b82518051600091906122a988876122a460408b018b613215565b61270c565b60e082015160006001600160a01b0382166122ed576001600160a01b0383166000908152602081905260409020548781116122e6578088036122e9565b60005b9150505b60208801516040516306608bdf60e21b81526001600160a01b038516916319822f7c918991612323918e919087906004016135b2565b60206040518083038160008887f19350505050801561235f575060408051601f3d908101601f1916820190925261235c918101906135d7565b60015b61238a578961236f610800611659565b6040516365c8fd4d60e01b81526004016105ed9291906135f0565b94506001600160a01b03821661240e576001600160a01b0383166000908152602081905260409020805480891115612408578b604051631101335b60e11b81526004016105ed9181526040602082018190526017908201527610504c8c48191a591b89dd081c185e481c1c99599d5b99604a1b606082015260800190565b88900390555b5050505095945050505050565b6001600160a01b038216600090815260016020908152604080832084821c80855292528220805484916001600160401b03831691908561245a836130a8565b909155501495945050505050565b60606000805a855160e08101516001600160a01b038116600090815260208190526040902080549394509192909190878110156124f1578a604051631101335b60e11b81526004016105ed918152604060208201819052601e908201527f41413331207061796d6173746572206465706f73697420746f6f206c6f770000606082015260800190565b8781038260000181905550600084608001519050836001600160a01b03166352b7512c828d8d602001518d6040518563ffffffff1660e01b815260040161253a939291906135b2565b60006040518083038160008887f19350505050801561257b57506040513d6000823e601f3d908101601f19168201604052612578919081019061362d565b60015b6125a6578b61258b610800611659565b6040516365c8fd4d60e01b81526004016105ed9291906136ad565b9098509650805a87031115612617578b604051631101335b60e11b81526004016105ed9181526040602082018190526027908201527f41413336206f766572207061796d6173746572566572696669636174696f6e47606082015266185cd31a5b5a5d60ca1b608082015260a00190565b50505050505094509492505050565b6000808260000361263c57506000928392509050565b6000612647846129ce565b9050806040015165ffffffffffff1642118061266e5750806020015165ffffffffffff1642105b905194909350915050565b6000818310612688578161268a565b825b9392505050565b6000604051828085833790209392505050565b600080806126b560148286886136ea565b6126be91613714565b60601c6126cf6024601487896136ea565b6126d891613749565b60801c6126e960346024888a6136ea565b6126f291613749565b9194506001600160801b0316925060801c90509250925092565b8015610bb2578251516001600160a01b0381163b156127775784604051631101335b60e11b81526004016105ed918152604060208201819052601f908201527f414131302073656e64657220616c726561647920636f6e737472756374656400606082015260800190565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570e1a3686600001516040015186866040518463ffffffff1660e01b81526004016127d092919061315f565b60206040518083038160008887f11580156127ef573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906128149190613173565b90506001600160a01b0381166128765785604051631101335b60e11b81526004016105ed918152604060208201819052601b908201527f4141313320696e6974436f6465206661696c6564206f72204f4f470000000000606082015260800190565b816001600160a01b0316816001600160a01b0316146128e05785604051631101335b60e11b81526004016105ed91815260406020808301829052908201527f4141313420696e6974436f6465206d7573742072657475726e2073656e646572606082015260800190565b806001600160a01b03163b6000036129435785604051631101335b60e11b81526004016105ed91815260406020808301829052908201527f4141313520696e6974436f6465206d757374206372656174652073656e646572606082015260800190565b600061295260148286886136ea565b61295b91613714565b60601c9050826001600160a01b031686602001517fd51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d83896000015160e001516040516129bd9291906001600160a01b0392831681529116602082015260400190565b60405180910390a350505050505050565b60408051606081018252600080825260208201819052918101919091528160a081901c65ffffffffffff8116600003612a0a575065ffffffffffff5b604080516060810182526001600160a01b03909316835260d09490941c602083015265ffffffffffff16928101929092525090565b6040518060a00160405280612ab260405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b8152602001600080191681526020016000815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715612b0f57612b0f612ad7565b60405290565b60405161014081016001600160401b0381118282101715612b0f57612b0f612ad7565b604051601f8201601f191681016001600160401b0381118282101715612b6057612b60612ad7565b604052919050565b60006001600160401b03821115612b8157612b81612ad7565b50601f01601f191660200190565b6001600160a01b0381168114612ba457600080fd5b50565b8035612bb281612b8f565b919050565b60008183036101c0811215612bcb57600080fd5b612bd3612aed565b915061014080821215612be557600080fd5b612bed612b15565b9150612bf884612ba7565b82526020840135602083015260408401356040830152606084013560608301526080840135608083015260a084013560a083015260c084013560c0830152612c4260e08501612ba7565b60e0830152610100848101359083015261012080850135908301529082528201356020820152610160820135604082015261018082013560608201526101a0909101356080820152919050565b60008083601f840112612ca157600080fd5b5081356001600160401b03811115612cb857600080fd5b602083019150836020828501011115612cd057600080fd5b9250929050565b6000806000806102008587031215612cee57600080fd5b84356001600160401b0380821115612d0557600080fd5b818701915087601f830112612d1957600080fd5b8135612d2c612d2782612b68565b612b38565b818152896020838601011115612d4157600080fd5b816020850160208301376000602083830101528097505050612d668860208901612bb7565b94506101e0870135915080821115612d7d57600080fd5b50612d8a87828801612c8f565b95989497509550505050565b600060208284031215612da857600080fd5b81356001600160e01b03198116811461268a57600080fd5b600060208284031215612dd257600080fd5b813563ffffffff8116811461268a57600080fd5b80356001600160c01b0381168114612bb257600080fd5b600060208284031215612e0f57600080fd5b61268a82612de6565b60008060408385031215612e2b57600080fd5b8235612e3681612b8f565b9150612e4460208401612de6565b90509250929050565b60008060408385031215612e6057600080fd5b8235612e6b81612b8f565b946020939093013593505050565b600060208284031215612e8b57600080fd5b81356001600160401b03811115612ea157600080fd5b8201610120818503121561268a57600080fd5b600060208284031215612ec657600080fd5b813561268a81612b8f565b60008083601f840112612ee357600080fd5b5081356001600160401b03811115612efa57600080fd5b6020830191508360208260051b8501011115612cd057600080fd5b600080600060408486031215612f2a57600080fd5b83356001600160401b03811115612f4057600080fd5b612f4c86828701612ed1565b9094509250506020840135612f6081612b8f565b809150509250925092565b600080600060408486031215612f8057600080fd5b8335612f8b81612b8f565b925060208401356001600160401b03811115612fa657600080fd5b612fb286828701612c8f565b9497909650939450505050565b60008060208385031215612fd257600080fd5b82356001600160401b03811115612fe857600080fd5b612ff485828601612c8f565b90969095509350505050565b634e487b7160e01b600052601260045260246000fd5b60005b83811015613031578181015183820152602001613019565b50506000910152565b60008151808452613052816020860160208601613016565b601f01601f19169290920160200192915050565b828152604060208201526000611ff2604083018461303a565b634e487b7160e01b600052601160045260246000fd5b808201808211156107a7576107a761307f565b6000600182016130ba576130ba61307f565b5060010190565b818103818111156107a7576107a761307f565b634e487b7160e01b600052603260045260246000fd5b6000823561011e1983360301811261310157600080fd5b9190910192915050565b8183823760009101908152919050565b8215158152604060208201526000611ff2604083018461303a565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000611ff2602083018486613136565b60006020828403121561318557600080fd5b815161268a81612b8f565b65ffffffffffff8181168382160190808211156131af576131af61307f565b5092915050565b60008235605e1983360301811261310157600080fd5b6000808335601e198436030181126131e357600080fd5b8301803591506001600160401b038211156131fd57600080fd5b6020019150600581901b3603821315612cd057600080fd5b6000808335601e1984360301811261322c57600080fd5b8301803591506001600160401b0382111561324657600080fd5b602001915036819003821315612cd057600080fd5b6000808335601e1984360301811261327257600080fd5b83016020810192503590506001600160401b0381111561329157600080fd5b803603821315612cd057600080fd5b60006101206132bf846132b285612ba7565b6001600160a01b03169052565b602083013560208501526132d6604084018461325b565b8260408701526132e98387018284613136565b925050506132fa606084018461325b565b858303606087015261330d838284613136565b925050506080830135608085015260a083013560a085015260c083013560c085015261333c60e084018461325b565b85830360e087015261334f838284613136565b925050506101006133628185018561325b565b86840383880152613374848284613136565b979650505050505050565b6040808252810184905260006060600586901b830181019083018783805b898110156133e557868503605f190184528235368c900361011e190181126133c3578283fd5b6133cf868d83016132a0565b955050602093840193929092019160010161339d565b505050508281036020840152613374818587613136565b634e487b7160e01b600052602160045260246000fd5b60006003861061343257634e487b7160e01b600052602160045260246000fd5b85825260806020830152613449608083018661303a565b6040830194909452506060015292915050565b60208152600061268a602083018461303a565b60408152600061348260408301856132a0565b90508260208301529392505050565b805180516001600160a01b031683526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c084015260e08101516134f660e08501826001600160a01b03169052565b5061010081810151908401526101209081015190830152602081015161014083015260408101516101608301526060810151610180830152608001516101a090910152565b600061020080835261354f8184018761303a565b905061355e6020840186613491565b8281036101e0840152613571818561303a565b9695505050505050565b60006102008083526135908184018789613136565b905061359f6020840186613491565b8281036101e0840152613374818561303a565b6060815260006135c560608301866132a0565b60208301949094525060400152919050565b6000602082840312156135e957600080fd5b5051919050565b82815260606020820152600d60608201526c10504c8cc81c995d995c9d1959609a1b608082015260a060408201526000611ff260a083018461303a565b6000806040838503121561364057600080fd5b82516001600160401b0381111561365657600080fd5b8301601f8101851361366757600080fd5b8051613675612d2782612b68565b81815286602083850101111561368a57600080fd5b61369b826020830160208601613016565b60209590950151949694955050505050565b82815260606020820152600d60608201526c10504cccc81c995d995c9d1959609a1b608082015260a060408201526000611ff260a083018461303a565b600080858511156136fa57600080fd5b8386111561370757600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156137415780818660140360031b1b83161692505b505092915050565b6001600160801b031981358181169160108510156137415760109490940360031b84901b169092169291505056fea2646970667358221220b45894ede92b99974ebc1ea2b14b15933078f1e0d22c5d02801223ec2722bb7264736f6c63430008180033",
  "devdoc": {
    "custom:security-contact": "https://bounty.ethereum.org",
    "errors": {
      "FailedOp(uint256,string)": [
        {
          "params": {
            "opIndex": "- Index into the array of ops to the failed one (in simulateValidation, this is always zero).",
            "reason": "- Revert reason. The string starts with a unique code \"AAmn\",                  where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,                  so a failure can be attributed to the correct entity."
          }
        }
      ],
      "FailedOpWithRevert(uint256,string,bytes)": [
        {
          "details": "note that inner is truncated to 2048 bytes",
          "params": {
            "inner": "- data from inner cought revert reason",
            "opIndex": "- Index into the array of ops to the failed one (in simulateValidation, this is always zero).",
            "reason": "- Revert reason. see FailedOp(uint256,string), above"
          }
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SignatureValidationFailed(address)": [
        {
          "params": {
            "aggregator": "The aggregator that failed to verify the signature"
          }
        }
      ]
    },
    "events": {
      "AccountDeployed(bytes32,address,address,address)": {
        "params": {
          "factory": "- The factory used to deploy this account (in the initCode)",
          "paymaster": "- The paymaster used by this UserOp",
          "sender": "- The account that is deployed",
          "userOpHash": "- The userOp that deployed this account. UserOperationEvent will follow."
        }
      },
      "PostOpRevertReason(bytes32,address,uint256,bytes)": {
        "params": {
          "nonce": "- The nonce used in the request.",
          "revertReason": "- The return bytes from the (reverted) call to \"callData\".",
          "sender": "- The sender of this request.",
          "userOpHash": "- The request unique identifier."
        }
      },
      "SignatureAggregatorChanged(address)": {
        "params": {
          "aggregator": "- The aggregator used for the following UserOperationEvents."
        }
      },
      "UserOperationPrefundTooLow(bytes32,address,uint256)": {
        "params": {
          "nonce": "- The nonce used in the request.",
          "sender": "- The sender of this request.",
          "userOpHash": "- The request unique identifier."
        }
      },
      "UserOperationRevertReason(bytes32,address,uint256,bytes)": {
        "params": {
          "nonce": "- The nonce used in the request.",
          "revertReason": "- The return bytes from the (reverted) call to \"callData\".",
          "sender": "- The sender of this request.",
          "userOpHash": "- The request unique identifier."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addStake(uint32)": {
        "params": {
          "unstakeDelaySec": "The new lock duration before the deposit can be withdrawn."
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "- The account to query."
        },
        "returns": {
          "_0": "- The deposit (for gas payment) of the account."
        }
      },
      "delegateAndRevert(address,bytes)": {
        "details": "calling this method, the EntryPoint will make a delegatecall to the given data, and report (via revert) the result.  The method always revert, so is only useful off-chain for dry run calls, in cases where state-override to replace  actual EntryPoint code is less convenient.",
        "params": {
          "data": "data to pass to target in a delegatecall",
          "target": "a target contract to make a delegatecall from entrypoint"
        }
      },
      "depositTo(address)": {
        "params": {
          "account": "- The account to add to."
        }
      },
      "getDepositInfo(address)": {
        "params": {
          "account": "- The account to query."
        },
        "returns": {
          "info": "  - Full deposit information of given account."
        }
      },
      "getNonce(address,uint192)": {
        "params": {
          "key": "the high 192 bit of the nonce",
          "sender": "the account address"
        },
        "returns": {
          "nonce": "a full nonce to pass for next UserOp with this sender."
        }
      },
      "getSenderAddress(bytes)": {
        "params": {
          "initCode": "- The constructor code to be passed into the UserOperation."
        }
      },
      "getUserOpHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))": {
        "params": {
          "userOp": "- The user operation to generate the request ID for."
        },
        "returns": {
          "_0": "hash the hash of this UserOperation"
        }
      },
      "handleAggregatedOps(((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address,bytes)[],address)": {
        "params": {
          "beneficiary": "- The address to receive the fees.",
          "opsPerAggregator": "- The operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)."
        }
      },
      "handleOps((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address)": {
        "params": {
          "beneficiary": "- The address to receive the fees.",
          "ops": "- The operations to execute."
        }
      },
      "innerHandleOp(bytes,((address,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256),bytes32,uint256,uint256,uint256),bytes)": {
        "params": {
          "callData": "- The callData to execute.",
          "context": "- The context bytes.",
          "opInfo": "- The UserOpInfo struct."
        },
        "returns": {
          "actualGasCost": "- the actual cost in eth this UserOperation paid for gas"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "withdrawStake(address)": {
        "params": {
          "withdrawAddress": "- The address to send withdrawn value."
        }
      },
      "withdrawTo(address,uint256)": {
        "params": {
          "withdrawAddress": "- The address to send withdrawn value.",
          "withdrawAmount": "- The amount to withdraw."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "FailedOp(uint256,string)": [
        {
          "notice": "A custom revert error of handleOps, to identify the offending op. Should be caught in off-chain handleOps simulation and not happen on-chain. Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts. NOTE: If simulateValidation passes successfully, there should be no reason for handleOps to fail on it."
        }
      ],
      "FailedOpWithRevert(uint256,string,bytes)": [
        {
          "notice": "A custom revert error of handleOps, to report a revert by account or paymaster."
        }
      ],
      "SignatureValidationFailed(address)": [
        {
          "notice": "Error case when a signature aggregator fails to verify the aggregated signature it had created."
        }
      ]
    },
    "events": {
      "AccountDeployed(bytes32,address,address,address)": {
        "notice": "Account \"sender\" was deployed."
      },
      "BeforeExecution()": {
        "notice": "An event emitted by handleOps(), before starting the execution loop. Any event emitted before this event, is part of the validation."
      },
      "PostOpRevertReason(bytes32,address,uint256,bytes)": {
        "notice": "An event emitted if the UserOperation Paymaster's \"postOp\" call reverted with non-zero length."
      },
      "SignatureAggregatorChanged(address)": {
        "notice": "Signature aggregator used by the following UserOperationEvents within this bundle."
      },
      "UserOperationPrefundTooLow(bytes32,address,uint256)": {
        "notice": "UserOp consumed more than prefund. The UserOperation is reverted, and no refund is made."
      },
      "UserOperationRevertReason(bytes32,address,uint256,bytes)": {
        "notice": "An event emitted if the UserOperation \"callData\" reverted with non-zero length."
      }
    },
    "kind": "user",
    "methods": {
      "addStake(uint32)": {
        "notice": "Add to the account's stake - amount and delay any pending unstake is first cancelled."
      },
      "balanceOf(address)": {
        "notice": "Get account balance."
      },
      "delegateAndRevert(address,bytes)": {
        "notice": "Helper method for dry-run testing."
      },
      "depositTo(address)": {
        "notice": "Add to the deposit of the given account."
      },
      "deposits(address)": {
        "notice": "maps paymaster to their deposits and stakes"
      },
      "getDepositInfo(address)": {
        "notice": "Get deposit info."
      },
      "getNonce(address,uint192)": {
        "notice": "Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order."
      },
      "getSenderAddress(bytes)": {
        "notice": "Get counterfactual sender address. Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. This method always revert, and returns the address in SenderAddressResult error"
      },
      "getUserOpHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))": {
        "notice": "Generate a request Id - unique identifier for this request. The request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid."
      },
      "handleAggregatedOps(((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address,bytes)[],address)": {
        "notice": "Execute a batch of UserOperation with Aggregators"
      },
      "handleOps((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address)": {
        "notice": "Execute a batch of UserOperations. No signature aggregator is used. If any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead."
      },
      "incrementNonce(uint192)": {
        "notice": "Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key."
      },
      "innerHandleOp(bytes,((address,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256),bytes32,uint256,uint256,uint256),bytes)": {
        "notice": "Inner function to handle a UserOperation. Must be declared \"external\" to open a call context, but it can only be called by handleOps."
      },
      "nonceSequenceNumber(address,uint192)": {
        "notice": "The next valid sequence number for a given nonce key."
      },
      "unlockStake()": {
        "notice": "Attempt to unlock the stake. The value can be withdrawn (using withdrawStake) after the unstake delay."
      },
      "withdrawStake(address)": {
        "notice": "Withdraw from the (unlocked) stake. Must first call unlockStake and wait for the unstakeDelay to pass."
      },
      "withdrawTo(address,uint256)": {
        "notice": "Withdraw from the deposit."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7816,
        "contract": "contracts/core/EntryPoint.sol:EntryPoint",
        "label": "deposits",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(DepositInfo)8985_storage)"
      },
      {
        "astId": 7679,
        "contract": "contracts/core/EntryPoint.sol:EntryPoint",
        "label": "nonceSequenceNumber",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint192,t_uint256))"
      },
      {
        "astId": 1806,
        "contract": "contracts/core/EntryPoint.sol:EntryPoint",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint192,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint192 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint192,t_uint256)"
      },
      "t_mapping(t_address,t_struct(DepositInfo)8985_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStakeManager.DepositInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositInfo)8985_storage"
      },
      "t_mapping(t_uint192,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint192",
        "label": "mapping(uint192 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DepositInfo)8985_storage": {
        "encoding": "inplace",
        "label": "struct IStakeManager.DepositInfo",
        "members": [
          {
            "astId": 8976,
            "contract": "contracts/core/EntryPoint.sol:EntryPoint",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8978,
            "contract": "contracts/core/EntryPoint.sol:EntryPoint",
            "label": "staked",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 8980,
            "contract": "contracts/core/EntryPoint.sol:EntryPoint",
            "label": "stake",
            "offset": 1,
            "slot": "1",
            "type": "t_uint112"
          },
          {
            "astId": 8982,
            "contract": "contracts/core/EntryPoint.sol:EntryPoint",
            "label": "unstakeDelaySec",
            "offset": 15,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 8984,
            "contract": "contracts/core/EntryPoint.sol:EntryPoint",
            "label": "withdrawTime",
            "offset": 19,
            "slot": "1",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint192": {
        "encoding": "inplace",
        "label": "uint192",
        "numberOfBytes": "24"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}